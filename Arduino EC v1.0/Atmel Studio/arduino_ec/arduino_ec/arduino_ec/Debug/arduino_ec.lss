
arduino_ec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001c5a  00001cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000112  0080014e  0080014e  00001d3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b06a  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002243  00000000  00000000  0000d296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029cd  00000000  00000000  0000f4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000df0  00000000  00000000  00011ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002604  00000000  00000000  00012c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ab8  00000000  00000000  0001529c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  0001ad54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_18>
      4c:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	e7 03       	fmuls	r22, r23
      c4:	09 0a       	sbc	r0, r25

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ea e5       	ldi	r30, 0x5A	; 90
      da:	fc e1       	ldi	r31, 0x1C	; 28
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	ae 34       	cpi	r26, 0x4E	; 78
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	ae e4       	ldi	r26, 0x4E	; 78
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a0 36       	cpi	r26, 0x60	; 96
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c3 e6       	ldi	r28, 0x63	; 99
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	21 97       	sbiw	r28, 0x01	; 1
     102:	fe 01       	movw	r30, r28
     104:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__tablejump2__>
     108:	c1 36       	cpi	r28, 0x61	; 97
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 37 0a 	call	0x146e	; 0x146e <main>
     112:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_ZN13LiquidCrystal11pulseEnableEv>:
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	ec 01       	movw	r28, r24
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	8e 81       	ldd	r24, Y+6	; 0x06
     124:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	8e 81       	ldd	r24, Y+6	; 0x06
     134:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	8e 81       	ldd	r24, Y+6	; 0x06
     144:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     148:	84 e6       	ldi	r24, 0x64	; 100
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <delayMicroseconds>

00000154 <_ZN13LiquidCrystal10write4bitsEh>:
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	7c 01       	movw	r14, r24
     166:	6c 01       	movw	r12, r24
     168:	87 e0       	ldi	r24, 0x07	; 7
     16a:	c8 0e       	add	r12, r24
     16c:	d1 1c       	adc	r13, r1
     16e:	c0 e0       	ldi	r28, 0x00	; 0
     170:	d0 e0       	ldi	r29, 0x00	; 0
     172:	06 2f       	mov	r16, r22
     174:	10 e0       	ldi	r17, 0x00	; 0
     176:	b8 01       	movw	r22, r16
     178:	0c 2e       	mov	r0, r28
     17a:	02 c0       	rjmp	.+4      	; 0x180 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     17c:	75 95       	asr	r23
     17e:	67 95       	ror	r22
     180:	0a 94       	dec	r0
     182:	e2 f7       	brpl	.-8      	; 0x17c <_ZN13LiquidCrystal10write4bitsEh+0x28>
     184:	61 70       	andi	r22, 0x01	; 1
     186:	f6 01       	movw	r30, r12
     188:	81 91       	ld	r24, Z+
     18a:	6f 01       	movw	r12, r30
     18c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     190:	21 96       	adiw	r28, 0x01	; 1
     192:	c4 30       	cpi	r28, 0x04	; 4
     194:	d1 05       	cpc	r29, r1
     196:	79 f7       	brne	.-34     	; 0x176 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     198:	c7 01       	movw	r24, r14
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	ff 90       	pop	r15
     1a4:	ef 90       	pop	r14
     1a6:	df 90       	pop	r13
     1a8:	cf 90       	pop	r12
     1aa:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_ZN13LiquidCrystal11pulseEnableEv>

000001ae <_ZN13LiquidCrystal10write8bitsEh>:
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	7c 01       	movw	r14, r24
     1c0:	6c 01       	movw	r12, r24
     1c2:	87 e0       	ldi	r24, 0x07	; 7
     1c4:	c8 0e       	add	r12, r24
     1c6:	d1 1c       	adc	r13, r1
     1c8:	c0 e0       	ldi	r28, 0x00	; 0
     1ca:	d0 e0       	ldi	r29, 0x00	; 0
     1cc:	06 2f       	mov	r16, r22
     1ce:	10 e0       	ldi	r17, 0x00	; 0
     1d0:	b8 01       	movw	r22, r16
     1d2:	0c 2e       	mov	r0, r28
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     1d6:	75 95       	asr	r23
     1d8:	67 95       	ror	r22
     1da:	0a 94       	dec	r0
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     1de:	61 70       	andi	r22, 0x01	; 1
     1e0:	f6 01       	movw	r30, r12
     1e2:	81 91       	ld	r24, Z+
     1e4:	6f 01       	movw	r12, r30
     1e6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     1ea:	21 96       	adiw	r28, 0x01	; 1
     1ec:	c8 30       	cpi	r28, 0x08	; 8
     1ee:	d1 05       	cpc	r29, r1
     1f0:	79 f7       	brne	.-34     	; 0x1d0 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     1f2:	c7 01       	movw	r24, r14
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_ZN13LiquidCrystal11pulseEnableEv>

00000208 <_ZN13LiquidCrystal4sendEhh>:
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ec 01       	movw	r28, r24
     210:	16 2f       	mov	r17, r22
     212:	64 2f       	mov	r22, r20
     214:	8c 81       	ldd	r24, Y+4	; 0x04
     216:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     21a:	8d 81       	ldd	r24, Y+5	; 0x05
     21c:	8f 3f       	cpi	r24, 0xFF	; 255
     21e:	19 f0       	breq	.+6      	; 0x226 <_ZN13LiquidCrystal4sendEhh+0x1e>
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     226:	8f 85       	ldd	r24, Y+15	; 0x0f
     228:	61 2f       	mov	r22, r17
     22a:	84 ff       	sbrs	r24, 4
     22c:	06 c0       	rjmp	.+12     	; 0x23a <_ZN13LiquidCrystal4sendEhh+0x32>
     22e:	ce 01       	movw	r24, r28
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_ZN13LiquidCrystal10write8bitsEh>
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	84 e0       	ldi	r24, 0x04	; 4
     23e:	75 95       	asr	r23
     240:	67 95       	ror	r22
     242:	8a 95       	dec	r24
     244:	e1 f7       	brne	.-8      	; 0x23e <_ZN13LiquidCrystal4sendEhh+0x36>
     246:	ce 01       	movw	r24, r28
     248:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN13LiquidCrystal10write4bitsEh>
     24c:	61 2f       	mov	r22, r17
     24e:	ce 01       	movw	r24, r28
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0c 94 aa 00 	jmp	0x154	; 0x154 <_ZN13LiquidCrystal10write4bitsEh>

0000025a <_ZN13LiquidCrystal7commandEh>:
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	0c 94 04 01 	jmp	0x208	; 0x208 <_ZN13LiquidCrystal4sendEhh>

00000260 <_ZN13LiquidCrystal5clearEv>:
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>
     266:	80 ed       	ldi	r24, 0xD0	; 208
     268:	97 e0       	ldi	r25, 0x07	; 7
     26a:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <delayMicroseconds>

0000026e <_ZN13LiquidCrystal9setCursorEhh>:
     26e:	fc 01       	movw	r30, r24
     270:	44 30       	cpi	r20, 0x04	; 4
     272:	08 f0       	brcs	.+2      	; 0x276 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     274:	43 e0       	ldi	r20, 0x03	; 3
     276:	83 89       	ldd	r24, Z+19	; 0x13
     278:	48 17       	cp	r20, r24
     27a:	10 f0       	brcs	.+4      	; 0x280 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     27c:	4f ef       	ldi	r20, 0xFF	; 255
     27e:	48 0f       	add	r20, r24
     280:	df 01       	movw	r26, r30
     282:	a4 0f       	add	r26, r20
     284:	b1 1d       	adc	r27, r1
     286:	54 96       	adiw	r26, 0x14	; 20
     288:	9c 91       	ld	r25, X
     28a:	69 0f       	add	r22, r25
     28c:	60 68       	ori	r22, 0x80	; 128
     28e:	cf 01       	movw	r24, r30
     290:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>

00000294 <_ZN13LiquidCrystal7displayEv>:
     294:	fc 01       	movw	r30, r24
     296:	60 89       	ldd	r22, Z+16	; 0x10
     298:	26 2f       	mov	r18, r22
     29a:	24 60       	ori	r18, 0x04	; 4
     29c:	20 8b       	std	Z+16, r18	; 0x10
     29e:	6c 60       	ori	r22, 0x0C	; 12
     2a0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>

000002a4 <_ZN13LiquidCrystal5beginEhhh>:
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
     2b2:	42 30       	cpi	r20, 0x02	; 2
     2b4:	18 f0       	brcs	.+6      	; 0x2bc <_ZN13LiquidCrystal5beginEhhh+0x18>
     2b6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2b8:	88 60       	ori	r24, 0x08	; 8
     2ba:	8f 87       	std	Y+15, r24	; 0x0f
     2bc:	4b 8b       	std	Y+19, r20	; 0x13
     2be:	1c 8a       	std	Y+20, r1	; 0x14
     2c0:	80 e4       	ldi	r24, 0x40	; 64
     2c2:	8d 8b       	std	Y+21, r24	; 0x15
     2c4:	6e 8b       	std	Y+22, r22	; 0x16
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	60 5c       	subi	r22, 0xC0	; 192
     2ca:	7f 4f       	sbci	r23, 0xFF	; 255
     2cc:	6f 8b       	std	Y+23, r22	; 0x17
     2ce:	22 23       	and	r18, r18
     2d0:	29 f0       	breq	.+10     	; 0x2dc <_ZN13LiquidCrystal5beginEhhh+0x38>
     2d2:	41 30       	cpi	r20, 0x01	; 1
     2d4:	19 f4       	brne	.+6      	; 0x2dc <_ZN13LiquidCrystal5beginEhhh+0x38>
     2d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8f 87       	std	Y+15, r24	; 0x0f
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>
     2e4:	8d 81       	ldd	r24, Y+5	; 0x05
     2e6:	8f 3f       	cpi	r24, 0xFF	; 255
     2e8:	19 f0       	breq	.+6      	; 0x2f0 <_ZN13LiquidCrystal5beginEhhh+0x4c>
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>
     2f0:	61 e0       	ldi	r22, 0x01	; 1
     2f2:	8e 81       	ldd	r24, Y+6	; 0x06
     2f4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>
     2f8:	7e 01       	movw	r14, r28
     2fa:	87 e0       	ldi	r24, 0x07	; 7
     2fc:	e8 0e       	add	r14, r24
     2fe:	f1 1c       	adc	r15, r1
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	10 e0       	ldi	r17, 0x00	; 0
     304:	8f 85       	ldd	r24, Y+15	; 0x0f
     306:	84 fd       	sbrc	r24, 4
     308:	03 c0       	rjmp	.+6      	; 0x310 <_ZN13LiquidCrystal5beginEhhh+0x6c>
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	02 c0       	rjmp	.+4      	; 0x314 <_ZN13LiquidCrystal5beginEhhh+0x70>
     310:	88 e0       	ldi	r24, 0x08	; 8
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	08 17       	cp	r16, r24
     316:	19 07       	cpc	r17, r25
     318:	4c f4       	brge	.+18     	; 0x32c <_ZN13LiquidCrystal5beginEhhh+0x88>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	f7 01       	movw	r30, r14
     31e:	81 91       	ld	r24, Z+
     320:	7f 01       	movw	r14, r30
     322:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>
     326:	0f 5f       	subi	r16, 0xFF	; 255
     328:	1f 4f       	sbci	r17, 0xFF	; 255
     32a:	ec cf       	rjmp	.-40     	; 0x304 <_ZN13LiquidCrystal5beginEhhh+0x60>
     32c:	80 e5       	ldi	r24, 0x50	; 80
     32e:	93 ec       	ldi	r25, 0xC3	; 195
     330:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	8c 81       	ldd	r24, Y+4	; 0x04
     338:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	8e 81       	ldd	r24, Y+6	; 0x06
     340:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     344:	8d 81       	ldd	r24, Y+5	; 0x05
     346:	8f 3f       	cpi	r24, 0xFF	; 255
     348:	19 f0       	breq	.+6      	; 0x350 <_ZN13LiquidCrystal5beginEhhh+0xac>
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
     350:	6f 85       	ldd	r22, Y+15	; 0x0f
     352:	64 fd       	sbrc	r22, 4
     354:	1d c0       	rjmp	.+58     	; 0x390 <_ZN13LiquidCrystal5beginEhhh+0xec>
     356:	63 e0       	ldi	r22, 0x03	; 3
     358:	ce 01       	movw	r24, r28
     35a:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN13LiquidCrystal10write4bitsEh>
     35e:	84 e9       	ldi	r24, 0x94	; 148
     360:	91 e1       	ldi	r25, 0x11	; 17
     362:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     366:	63 e0       	ldi	r22, 0x03	; 3
     368:	ce 01       	movw	r24, r28
     36a:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN13LiquidCrystal10write4bitsEh>
     36e:	84 e9       	ldi	r24, 0x94	; 148
     370:	91 e1       	ldi	r25, 0x11	; 17
     372:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     376:	63 e0       	ldi	r22, 0x03	; 3
     378:	ce 01       	movw	r24, r28
     37a:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN13LiquidCrystal10write4bitsEh>
     37e:	86 e9       	ldi	r24, 0x96	; 150
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     386:	62 e0       	ldi	r22, 0x02	; 2
     388:	ce 01       	movw	r24, r28
     38a:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN13LiquidCrystal10write4bitsEh>
     38e:	16 c0       	rjmp	.+44     	; 0x3bc <_ZN13LiquidCrystal5beginEhhh+0x118>
     390:	60 62       	ori	r22, 0x20	; 32
     392:	ce 01       	movw	r24, r28
     394:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>
     398:	84 e9       	ldi	r24, 0x94	; 148
     39a:	91 e1       	ldi	r25, 0x11	; 17
     39c:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     3a0:	6f 85       	ldd	r22, Y+15	; 0x0f
     3a2:	60 62       	ori	r22, 0x20	; 32
     3a4:	ce 01       	movw	r24, r28
     3a6:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>
     3aa:	86 e9       	ldi	r24, 0x96	; 150
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     3b2:	6f 85       	ldd	r22, Y+15	; 0x0f
     3b4:	60 62       	ori	r22, 0x20	; 32
     3b6:	ce 01       	movw	r24, r28
     3b8:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>
     3bc:	6f 85       	ldd	r22, Y+15	; 0x0f
     3be:	60 62       	ori	r22, 0x20	; 32
     3c0:	ce 01       	movw	r24, r28
     3c2:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	88 8b       	std	Y+16, r24	; 0x10
     3ca:	ce 01       	movw	r24, r28
     3cc:	0e 94 4a 01 	call	0x294	; 0x294 <_ZN13LiquidCrystal7displayEv>
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 30 01 	call	0x260	; 0x260 <_ZN13LiquidCrystal5clearEv>
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	89 8b       	std	Y+17, r24	; 0x11
     3da:	66 e0       	ldi	r22, 0x06	; 6
     3dc:	ce 01       	movw	r24, r28
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>

000003ee <_ZN13LiquidCrystalC1Ehhhhhh>:
     3ee:	cf 92       	push	r12
     3f0:	ef 92       	push	r14
     3f2:	0f 93       	push	r16
     3f4:	fc 01       	movw	r30, r24
     3f6:	13 82       	std	Z+3, r1	; 0x03
     3f8:	12 82       	std	Z+2, r1	; 0x02
     3fa:	8d e0       	ldi	r24, 0x0D	; 13
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	91 83       	std	Z+1, r25	; 0x01
     400:	80 83       	st	Z, r24
     402:	64 83       	std	Z+4, r22	; 0x04
     404:	8f ef       	ldi	r24, 0xFF	; 255
     406:	85 83       	std	Z+5, r24	; 0x05
     408:	46 83       	std	Z+6, r20	; 0x06
     40a:	27 83       	std	Z+7, r18	; 0x07
     40c:	00 87       	std	Z+8, r16	; 0x08
     40e:	e1 86       	std	Z+9, r14	; 0x09
     410:	c2 86       	std	Z+10, r12	; 0x0a
     412:	13 86       	std	Z+11, r1	; 0x0b
     414:	14 86       	std	Z+12, r1	; 0x0c
     416:	15 86       	std	Z+13, r1	; 0x0d
     418:	16 86       	std	Z+14, r1	; 0x0e
     41a:	17 86       	std	Z+15, r1	; 0x0f
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	60 e1       	ldi	r22, 0x10	; 16
     422:	cf 01       	movw	r24, r30
     424:	0f 91       	pop	r16
     426:	ef 90       	pop	r14
     428:	cf 90       	pop	r12
     42a:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_ZN13LiquidCrystal5beginEhhh>

0000042e <_ZN13LiquidCrystal10createCharEhPh>:
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	00 d0       	rcall	.+0      	; 0x440 <_ZN13LiquidCrystal10createCharEhPh+0x12>
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	8c 01       	movw	r16, r24
  location &= 0x7; // we only have 8 locations 0-7
     446:	67 70       	andi	r22, 0x07	; 7
  command(LCD_SETCGRAMADDR | (location << 3));
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	68 9f       	mul	r22, r24
     44c:	b0 01       	movw	r22, r0
     44e:	11 24       	eor	r1, r1
     450:	60 64       	ori	r22, 0x40	; 64
     452:	c8 01       	movw	r24, r16
     454:	49 83       	std	Y+1, r20	; 0x01
     456:	5a 83       	std	Y+2, r21	; 0x02
     458:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN13LiquidCrystal7commandEh>
     45c:	49 81       	ldd	r20, Y+1	; 0x01
     45e:	c4 2e       	mov	r12, r20
     460:	5a 81       	ldd	r21, Y+2	; 0x02
     462:	d5 2e       	mov	r13, r21
     464:	76 01       	movw	r14, r12
     466:	a8 e0       	ldi	r26, 0x08	; 8
     468:	ea 0e       	add	r14, r26
     46a:	f1 1c       	adc	r15, r1
  for (int i=0; i<8; i++) {
    write(charmap[i]);
     46c:	f6 01       	movw	r30, r12
     46e:	61 91       	ld	r22, Z+
     470:	6f 01       	movw	r12, r30
     472:	d8 01       	movw	r26, r16
     474:	ed 91       	ld	r30, X+
     476:	fc 91       	ld	r31, X
     478:	01 90       	ld	r0, Z+
     47a:	f0 81       	ld	r31, Z
     47c:	e0 2d       	mov	r30, r0
     47e:	c8 01       	movw	r24, r16
     480:	09 95       	icall
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
     482:	ce 14       	cp	r12, r14
     484:	df 04       	cpc	r13, r15
     486:	91 f7       	brne	.-28     	; 0x46c <_ZN13LiquidCrystal10createCharEhPh+0x3e>
    write(charmap[i]);
  }
}
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	08 95       	ret

0000049e <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	0e 94 04 01 	call	0x208	; 0x208 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	08 95       	ret

000004aa <_Z12init_ds18b20v>:
#define interval	100

/* Initialize DS18B20*/
void init_ds18b20(void)
{
	if ( !ds.search(addr)) {
     4aa:	41 e0       	ldi	r20, 0x01	; 1
     4ac:	6f e7       	ldi	r22, 0x7F	; 127
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	84 e9       	ldi	r24, 0x94	; 148
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN7OneWire6searchEPhb>
     4b8:	81 11       	cpse	r24, r1
     4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <_Z12init_ds18b20v+0x26>
		ds.reset_search();
     4bc:	84 e9       	ldi	r24, 0x94	; 148
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN7OneWire12reset_searchEv>
		delay(250);
     4c4:	6a ef       	ldi	r22, 0xFA	; 250
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <delay>
     4d0:	08 95       	ret

000004d2 <_Z14update_ds18b20v>:
	}
}


void update_ds18b20(void)
{
     4d2:	cf 93       	push	r28
	// routines for DS18B20
	ds.reset();
     4d4:	84 e9       	ldi	r24, 0x94	; 148
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7OneWire5resetEv>
	ds.select(addr);
     4dc:	6f e7       	ldi	r22, 0x7F	; 127
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	84 e9       	ldi	r24, 0x94	; 148
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN7OneWire6selectEPKh>
	ds.write(0x44, 1);        // start conversion, with parasite power on at the end
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	64 e4       	ldi	r22, 0x44	; 68
     4ec:	84 e9       	ldi	r24, 0x94	; 148
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN7OneWire5writeEhh>
	// wait conversion
	delay(50);
     4f4:	62 e3       	ldi	r22, 0x32	; 50
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <delay>
	ds.reset();
     500:	84 e9       	ldi	r24, 0x94	; 148
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7OneWire5resetEv>
	ds.select(addr);
     508:	6f e7       	ldi	r22, 0x7F	; 127
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	84 e9       	ldi	r24, 0x94	; 148
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN7OneWire6selectEPKh>
	ds.write(0xBE);
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	6e eb       	ldi	r22, 0xBE	; 190
     518:	84 e9       	ldi	r24, 0x94	; 148
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN7OneWire5writeEhh>
	// read 9 bytes frm sensor
	for ( i = 0; i < 9; i++) {           // we need 9 bytes
     520:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <i>
     524:	c0 91 93 01 	lds	r28, 0x0193	; 0x800193 <i>
     528:	c9 30       	cpi	r28, 0x09	; 9
     52a:	78 f4       	brcc	.+30     	; 0x54a <_Z14update_ds18b20v+0x78>
		data[i] = ds.read();
     52c:	84 e9       	ldi	r24, 0x94	; 148
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN7OneWire4readEv>
     534:	ec 2f       	mov	r30, r28
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	e9 57       	subi	r30, 0x79	; 121
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	80 83       	st	Z, r24
	delay(50);
	ds.reset();
	ds.select(addr);
	ds.write(0xBE);
	// read 9 bytes frm sensor
	for ( i = 0; i < 9; i++) {           // we need 9 bytes
     53e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <i>
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <i>
     548:	ed cf       	rjmp	.-38     	; 0x524 <_Z14update_ds18b20v+0x52>
		data[i] = ds.read();
	}
	// get 16 bits sensor data
	int16_t raw = ((data[1] << 8) | data[0]) & ~1;
     54a:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <data+0x1>
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	76 2f       	mov	r23, r22
     552:	66 27       	eor	r22, r22
     554:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <data>
     558:	68 2b       	or	r22, r24
     55a:	6e 7f       	andi	r22, 0xFE	; 254
	// convert measured values to Celsius
	celsius = (float)raw / 16.0;
     55c:	07 2e       	mov	r0, r23
     55e:	00 0c       	add	r0, r0
     560:	88 0b       	sbc	r24, r24
     562:	99 0b       	sbc	r25, r25
     564:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__floatsisf>
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e8       	ldi	r20, 0x80	; 128
     56e:	5d e3       	ldi	r21, 0x3D	; 61
     570:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     574:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <celsius>
     578:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <celsius+0x1>
     57c:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <celsius+0x2>
     580:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <celsius+0x3>
}
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <_Z8update_kv>:

/* Update conductance from ADC */
void update_k(void)
{
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
	adc_total = adc_total - adc[adc_index];
     58c:	c0 91 56 01 	lds	r28, 0x0156	; 0x800156 <adc_index>
     590:	d0 e0       	ldi	r29, 0x00	; 0
     592:	cc 0f       	add	r28, r28
     594:	dd 1f       	adc	r29, r29
     596:	c9 5a       	subi	r28, 0xA9	; 169
     598:	de 4f       	sbci	r29, 0xFE	; 254
     59a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <adc_total>
     59e:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <adc_total+0x1>
     5a2:	28 81       	ld	r18, Y
     5a4:	39 81       	ldd	r19, Y+1	; 0x01
     5a6:	82 1b       	sub	r24, r18
     5a8:	93 0b       	sbc	r25, r19
     5aa:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <adc_total+0x1>
     5ae:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <adc_total>
	adc[adc_index] = analogRead(CE);
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <analogRead>
     5b8:	99 83       	std	Y+1, r25	; 0x01
     5ba:	88 83       	st	Y, r24
	adc_total = adc_total + adc[adc_index];
     5bc:	c0 91 56 01 	lds	r28, 0x0156	; 0x800156 <adc_index>
     5c0:	ec 2f       	mov	r30, r28
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	e9 5a       	subi	r30, 0xA9	; 169
     5ca:	fe 4f       	sbci	r31, 0xFE	; 254
     5cc:	20 81       	ld	r18, Z
     5ce:	31 81       	ldd	r19, Z+1	; 0x01
     5d0:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <adc_total>
     5d4:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <adc_total+0x1>
     5d8:	82 0f       	add	r24, r18
     5da:	93 1f       	adc	r25, r19
     5dc:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <adc_total+0x1>
     5e0:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <adc_total>
	adc_avg = adc_total / ADC_N;
     5e4:	6a e0       	ldi	r22, 0x0A	; 10
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__udivmodhi4>
     5ec:	70 93 6e 01 	sts	0x016E, r23	; 0x80016e <adc_avg+0x1>
     5f0:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <adc_avg>
	k = (float)adc_avg * V_REF_K;
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__floatunsisf>
     5fc:	28 e6       	ldi	r18, 0x68	; 104
     5fe:	38 ee       	ldi	r19, 0xE8	; 232
     600:	4f e9       	ldi	r20, 0x9F	; 159
     602:	5b e3       	ldi	r21, 0x3B	; 59
     604:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     608:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <k>
     60c:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <k+0x1>
     610:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <k+0x2>
     614:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <k+0x3>
	adc_index++;
     618:	cf 5f       	subi	r28, 0xFF	; 255
	if(adc_index > 9) adc_index = 0;
     61a:	ca 30       	cpi	r28, 0x0A	; 10
     61c:	18 f4       	brcc	.+6      	; 0x624 <_Z8update_kv+0x9c>
	adc_total = adc_total - adc[adc_index];
	adc[adc_index] = analogRead(CE);
	adc_total = adc_total + adc[adc_index];
	adc_avg = adc_total / ADC_N;
	k = (float)adc_avg * V_REF_K;
	adc_index++;
     61e:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <adc_index>
     622:	02 c0       	rjmp	.+4      	; 0x628 <_Z8update_kv+0xa0>
	if(adc_index > 9) adc_index = 0;
     624:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <adc_index>
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <loop>:
	// serial port (not used yet)
	Serial.begin(9600);
	Serial.println(VERSION);
}

void loop() {
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
  
	// get new temperature on ds18b20
	update_ds18b20();
     636:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_Z14update_ds18b20v>
	
	// get new value from adc
	update_k();
     63a:	0e 94 c4 02 	call	0x588	; 0x588 <_Z8update_kv>
	// get ec from conductance
	ec = k * Q;
     63e:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <k>
     642:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <k+0x1>
     646:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <k+0x2>
     64a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <k+0x3>
     64e:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <ec>
     652:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <ec+0x1>
     656:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <ec+0x2>
     65a:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <ec+0x3>
	// equation with temperature coefficient
	ec_ref = (100*ec)/(100+teta*(celsius - t_ref));
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	48 ec       	ldi	r20, 0xC8	; 200
     664:	52 e4       	ldi	r21, 0x42	; 66
     666:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     66a:	6b 01       	movw	r12, r22
     66c:	7c 01       	movw	r14, r24
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	48 ec       	ldi	r20, 0xC8	; 200
     674:	51 e4       	ldi	r21, 0x41	; 65
     676:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <celsius>
     67a:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <celsius+0x1>
     67e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <celsius+0x2>
     682:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <celsius+0x3>
     686:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__subsf3>
     68a:	26 e6       	ldi	r18, 0x66	; 102
     68c:	36 e6       	ldi	r19, 0x66	; 102
     68e:	46 e6       	ldi	r20, 0x66	; 102
     690:	5f e3       	ldi	r21, 0x3F	; 63
     692:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	48 ec       	ldi	r20, 0xC8	; 200
     69c:	52 e4       	ldi	r21, 0x42	; 66
     69e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__addsf3>
     6a2:	9b 01       	movw	r18, r22
     6a4:	ac 01       	movw	r20, r24
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__divsf3>
     6ae:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <ec_ref>
     6b2:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <ec_ref+0x1>
     6b6:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <ec_ref+0x2>
     6ba:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <ec_ref+0x3>
		
	// update lcd value every interval
	currentMillis = millis();
     6be:	0e 94 27 0c 	call	0x184e	; 0x184e <millis>
     6c2:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <__data_end>
     6c6:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <__data_end+0x1>
     6ca:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end+0x2>
     6ce:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__data_end+0x3>
	if (currentMillis - previousMillis >= interval) 
     6d2:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <previousMillis>
     6d6:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <previousMillis+0x1>
     6da:	e0 90 54 01 	lds	r14, 0x0154	; 0x800154 <previousMillis+0x2>
     6de:	f0 90 55 01 	lds	r15, 0x0155	; 0x800155 <previousMillis+0x3>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	8c 19       	sub	r24, r12
     6e8:	9d 09       	sbc	r25, r13
     6ea:	ae 09       	sbc	r26, r14
     6ec:	bf 09       	sbc	r27, r15
     6ee:	84 36       	cpi	r24, 0x64	; 100
     6f0:	91 05       	cpc	r25, r1
     6f2:	a1 05       	cpc	r26, r1
     6f4:	b1 05       	cpc	r27, r1
     6f6:	08 f4       	brcc	.+2      	; 0x6fa <loop+0xcc>
     6f8:	65 c0       	rjmp	.+202    	; 0x7c4 <loop+0x196>
	{
		//update temperature
		lcd.setCursor(0,0);
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	82 ea       	ldi	r24, 0xA2	; 162
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print(celsius,1);
     706:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <celsius>
     70a:	50 91 7c 01 	lds	r21, 0x017C	; 0x80017c <celsius+0x1>
     70e:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <celsius+0x2>
     712:	70 91 7e 01 	lds	r23, 0x017E	; 0x80017e <celsius+0x3>
     716:	21 e0       	ldi	r18, 0x01	; 1
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	82 ea       	ldi	r24, 0xA2	; 162
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN5Print5printEdi>
		// update ec value
		lcd.setCursor(7,0);
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	67 e0       	ldi	r22, 0x07	; 7
     726:	82 ea       	ldi	r24, 0xA2	; 162
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print(ec,2);
     72e:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <ec>
     732:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <ec+0x1>
     736:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <ec+0x2>
     73a:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <ec+0x3>
     73e:	22 e0       	ldi	r18, 0x02	; 2
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	82 ea       	ldi	r24, 0xA2	; 162
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN5Print5printEdi>
		// update ec value 25°C
		lcd.setCursor(7,1);
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	67 e0       	ldi	r22, 0x07	; 7
     74e:	82 ea       	ldi	r24, 0xA2	; 162
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
		if (ec_ref >= 0)
     756:	c0 90 6f 01 	lds	r12, 0x016F	; 0x80016f <ec_ref>
     75a:	d0 90 70 01 	lds	r13, 0x0170	; 0x800170 <ec_ref+0x1>
     75e:	e0 90 71 01 	lds	r14, 0x0171	; 0x800171 <ec_ref+0x2>
     762:	f0 90 72 01 	lds	r15, 0x0172	; 0x800172 <ec_ref+0x3>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	a9 01       	movw	r20, r18
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__gesf2>
		{
			lcd.print(ec_ref,2);
     774:	22 e0       	ldi	r18, 0x02	; 2
     776:	30 e0       	ldi	r19, 0x00	; 0
		// update ec value
		lcd.setCursor(7,0);
		lcd.print(ec,2);
		// update ec value 25°C
		lcd.setCursor(7,1);
		if (ec_ref >= 0)
     778:	87 fd       	sbrc	r24, 7
     77a:	03 c0       	rjmp	.+6      	; 0x782 <loop+0x154>
		{
			lcd.print(ec_ref,2);
     77c:	b7 01       	movw	r22, r14
     77e:	a6 01       	movw	r20, r12
     780:	03 c0       	rjmp	.+6      	; 0x788 <loop+0x15a>
		} 
		else
		{
			lcd.print(0.00,2);
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	ba 01       	movw	r22, r20
     788:	82 ea       	ldi	r24, 0xA2	; 162
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN5Print5printEdi>
		}
		
		
		// heart beat, blink every lcd update
		digitalWrite(HB,!digitalRead(HB));
     790:	8d e0       	ldi	r24, 0x0D	; 13
     792:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <digitalRead>
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	89 2b       	or	r24, r25
     79a:	09 f0       	breq	.+2      	; 0x79e <loop+0x170>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	8d e0       	ldi	r24, 0x0D	; 13
     7a0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <digitalWrite>
		
		previousMillis = currentMillis;
     7a4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     7a8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <__data_end+0x1>
     7ac:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <__data_end+0x2>
     7b0:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <__data_end+0x3>
     7b4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <previousMillis>
     7b8:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <previousMillis+0x1>
     7bc:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <previousMillis+0x2>
     7c0:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <previousMillis+0x3>


	}  
}
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	08 95       	ret

000007ce <_GLOBAL__sub_I_lcd>:
     7ce:	cf 92       	push	r12
     7d0:	ef 92       	push	r14
     7d2:	0f 93       	push	r16
 */ 

#include "main.h"

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	c8 2e       	mov	r12, r24
     7d8:	93 e0       	ldi	r25, 0x03	; 3
     7da:	e9 2e       	mov	r14, r25
     7dc:	04 e0       	ldi	r16, 0x04	; 4
     7de:	25 e0       	ldi	r18, 0x05	; 5
     7e0:	4b e0       	ldi	r20, 0x0B	; 11
     7e2:	6c e0       	ldi	r22, 0x0C	; 12
     7e4:	82 ea       	ldi	r24, 0xA2	; 162
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN13LiquidCrystalC1Ehhhhhh>
	B00000,
	B00000,
	B00000
};

OneWire  ds(DS);  // on pin 10 (a 4.7K resistor is necessary)
     7ec:	6a e0       	ldi	r22, 0x0A	; 10
     7ee:	84 e9       	ldi	r24, 0x94	; 148
     7f0:	91 e0       	ldi	r25, 0x01	; 1
		
		previousMillis = currentMillis;


	}  
}
     7f2:	0f 91       	pop	r16
     7f4:	ef 90       	pop	r14
     7f6:	cf 90       	pop	r12
	B00000,
	B00000,
	B00000
};

OneWire  ds(DS);  // on pin 10 (a 4.7K resistor is necessary)
     7f8:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <_ZN7OneWireC1Eh>

000007fc <setup>:
}

void setup() {
  
	// configure GPIO
	pinMode(HB,OUTPUT);
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	8d e0       	ldi	r24, 0x0D	; 13
     800:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>
	// create custom char °
    lcd.createChar(0, customChar);
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	51 e0       	ldi	r21, 0x01	; 1
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	82 ea       	ldi	r24, 0xA2	; 162
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN13LiquidCrystal10createCharEhPh>
	// set up the LCD's number of columns and rows:
	lcd.begin(16, 2);
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	42 e0       	ldi	r20, 0x02	; 2
     816:	60 e1       	ldi	r22, 0x10	; 16
     818:	82 ea       	ldi	r24, 0xA2	; 162
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN13LiquidCrystal5beginEhhh>
	lcd.setCursor(0,0);
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	82 ea       	ldi	r24, 0xA2	; 162
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
	// print firmware version for 1s
	lcd.print(VERSION); 
     82c:	61 e1       	ldi	r22, 0x11	; 17
     82e:	71 e0       	ldi	r23, 0x01	; 1
     830:	82 ea       	ldi	r24, 0xA2	; 162
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN5Print5printEPKc>
	delay(1000);
     838:	68 ee       	ldi	r22, 0xE8	; 232
     83a:	73 e0       	ldi	r23, 0x03	; 3
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <delay>
	// clear screen and print fixed fields
	lcd.clear();
     844:	82 ea       	ldi	r24, 0xA2	; 162
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 30 01 	call	0x260	; 0x260 <_ZN13LiquidCrystal5clearEv>
	//lcd.print("Temp.:");
	// print °C and EC
	lcd.setCursor(4,0);
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	64 e0       	ldi	r22, 0x04	; 4
     850:	82 ea       	ldi	r24, 0xA2	; 162
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.write(byte(0));
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	82 ea       	ldi	r24, 0xA2	; 162
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN13LiquidCrystal5writeEh>
	lcd.setCursor(5,0);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	65 e0       	ldi	r22, 0x05	; 5
     866:	82 ea       	ldi	r24, 0xA2	; 162
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("C ");
     86e:	6f e1       	ldi	r22, 0x1F	; 31
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	82 ea       	ldi	r24, 0xA2	; 162
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN5Print5printEPKc>
	lcd.setCursor(11,0);
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	6b e0       	ldi	r22, 0x0B	; 11
     87e:	82 ea       	ldi	r24, 0xA2	; 162
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("mS/cm");
     886:	62 e2       	ldi	r22, 0x22	; 34
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	82 ea       	ldi	r24, 0xA2	; 162
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN5Print5printEPKc>

	// print EC 25°C 
	lcd.setCursor(0,1);
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	82 ea       	ldi	r24, 0xA2	; 162
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("EC25");
     89e:	68 e2       	ldi	r22, 0x28	; 40
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	82 ea       	ldi	r24, 0xA2	; 162
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN5Print5printEPKc>
	lcd.setCursor(4,1);
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	64 e0       	ldi	r22, 0x04	; 4
     8ae:	82 ea       	ldi	r24, 0xA2	; 162
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.write(byte(0));
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	82 ea       	ldi	r24, 0xA2	; 162
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN13LiquidCrystal5writeEh>
	lcd.setCursor(5,1);
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	65 e0       	ldi	r22, 0x05	; 5
     8c4:	82 ea       	ldi	r24, 0xA2	; 162
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("C");
     8cc:	6d e2       	ldi	r22, 0x2D	; 45
     8ce:	71 e0       	ldi	r23, 0x01	; 1
     8d0:	82 ea       	ldi	r24, 0xA2	; 162
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN5Print5printEPKc>
	lcd.setCursor(11,1);
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	6b e0       	ldi	r22, 0x0B	; 11
     8dc:	82 ea       	ldi	r24, 0xA2	; 162
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("mS/cm");
     8e4:	62 e2       	ldi	r22, 0x22	; 34
     8e6:	71 e0       	ldi	r23, 0x01	; 1
     8e8:	82 ea       	ldi	r24, 0xA2	; 162
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN5Print5printEPKc>

	init_ds18b20();
     8f0:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z12init_ds18b20v>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     8f4:	26 e0       	ldi	r18, 0x06	; 6
     8f6:	40 e8       	ldi	r20, 0x80	; 128
     8f8:	55 e2       	ldi	r21, 0x25	; 37
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	8a eb       	ldi	r24, 0xBA	; 186
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN14HardwareSerial5beginEmh>
	
	// serial port (not used yet)
	Serial.begin(9600);
	Serial.println(VERSION);
     906:	61 e1       	ldi	r22, 0x11	; 17
     908:	71 e0       	ldi	r23, 0x01	; 1
     90a:	8a eb       	ldi	r24, 0xBA	; 186
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <_ZN5Print7printlnEPKc>

00000912 <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = FALSE;
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	fc 01       	movw	r30, r24
     91e:	00 81       	ld	r16, Z
     920:	c1 81       	ldd	r28, Z+1	; 0x01
     922:	d2 81       	ldd	r29, Z+2	; 0x02
     924:	f8 94       	cli
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	f0 2e       	mov	r15, r16
     92a:	f0 94       	com	r15
     92c:	8f 21       	and	r24, r15
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	78 94       	sei
     932:	1d e7       	ldi	r17, 0x7D	; 125
     934:	11 50       	subi	r17, 0x01	; 1
     936:	29 f1       	breq	.+74     	; 0x982 <_ZN7OneWire5resetEv+0x70>
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     940:	88 81       	ld	r24, Y
     942:	80 23       	and	r24, r16
     944:	b9 f3       	breq	.-18     	; 0x934 <_ZN7OneWire5resetEv+0x22>
     946:	f8 94       	cli
     948:	8a 81       	ldd	r24, Y+2	; 0x02
     94a:	8f 21       	and	r24, r15
     94c:	8a 83       	std	Y+2, r24	; 0x02
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	80 2b       	or	r24, r16
     952:	89 83       	std	Y+1, r24	; 0x01
     954:	78 94       	sei
     956:	80 ee       	ldi	r24, 0xE0	; 224
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     95e:	f8 94       	cli
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	f8 22       	and	r15, r24
     964:	f9 82       	std	Y+1, r15	; 0x01
     966:	86 e4       	ldi	r24, 0x46	; 70
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     96e:	88 81       	ld	r24, Y
     970:	08 23       	and	r16, r24
     972:	11 e0       	ldi	r17, 0x01	; 1
     974:	09 f0       	breq	.+2      	; 0x978 <_ZN7OneWire5resetEv+0x66>
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	78 94       	sei
     97a:	8a e9       	ldi	r24, 0x9A	; 154
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     982:	81 2f       	mov	r24, r17
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	08 95       	ret

00000990 <_ZN7OneWire9write_bitEh>:
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	fc 01       	movw	r30, r24
     998:	10 81       	ld	r17, Z
     99a:	c1 81       	ldd	r28, Z+1	; 0x01
     99c:	d2 81       	ldd	r29, Z+2	; 0x02
     99e:	81 2f       	mov	r24, r17
     9a0:	80 95       	com	r24
     9a2:	60 ff       	sbrs	r22, 0
     9a4:	12 c0       	rjmp	.+36     	; 0x9ca <_ZN7OneWire9write_bitEh+0x3a>
     9a6:	f8 94       	cli
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	89 23       	and	r24, r25
     9ac:	8a 83       	std	Y+2, r24	; 0x02
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	81 2b       	or	r24, r17
     9b2:	89 83       	std	Y+1, r24	; 0x01
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	18 2b       	or	r17, r24
     9c0:	1a 83       	std	Y+2, r17	; 0x02
     9c2:	78 94       	sei
     9c4:	87 e3       	ldi	r24, 0x37	; 55
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	11 c0       	rjmp	.+34     	; 0x9ec <_ZN7OneWire9write_bitEh+0x5c>
     9ca:	f8 94       	cli
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	89 23       	and	r24, r25
     9d0:	8a 83       	std	Y+2, r24	; 0x02
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	81 2b       	or	r24, r17
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	81 e4       	ldi	r24, 0x41	; 65
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     9e0:	8a 81       	ldd	r24, Y+2	; 0x02
     9e2:	18 2b       	or	r17, r24
     9e4:	1a 83       	std	Y+2, r17	; 0x02
     9e6:	78 94       	sei
     9e8:	85 e0       	ldi	r24, 0x05	; 5
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <delayMicroseconds>

000009f6 <_ZN7OneWire8read_bitEv>:
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	fc 01       	movw	r30, r24
     a00:	10 81       	ld	r17, Z
     a02:	c1 81       	ldd	r28, Z+1	; 0x01
     a04:	d2 81       	ldd	r29, Z+2	; 0x02
     a06:	f8 94       	cli
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	81 2b       	or	r24, r17
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
     a10:	01 2f       	mov	r16, r17
     a12:	00 95       	com	r16
     a14:	80 23       	and	r24, r16
     a16:	8a 83       	std	Y+2, r24	; 0x02
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	08 23       	and	r16, r24
     a24:	09 83       	std	Y+1, r16	; 0x01
     a26:	8a e0       	ldi	r24, 0x0A	; 10
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     a2e:	c8 81       	ld	r28, Y
     a30:	78 94       	sei
     a32:	85 e3       	ldi	r24, 0x35	; 53
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 94 0c 	call	0x1928	; 0x1928 <delayMicroseconds>
     a3a:	1c 23       	and	r17, r28
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	09 f4       	brne	.+2      	; 0xa42 <_ZN7OneWire8read_bitEv+0x4c>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	08 95       	ret

00000a4c <_ZN7OneWire5writeEhh>:
     a4c:	cf 92       	push	r12
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	1f 92       	push	r1
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	6c 01       	movw	r12, r24
     a64:	e6 2e       	mov	r14, r22
     a66:	08 e0       	ldi	r16, 0x08	; 8
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	ff 24       	eor	r15, r15
     a6c:	f3 94       	inc	r15
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	8f 2d       	mov	r24, r15
     a72:	8e 21       	and	r24, r14
     a74:	09 f4       	brne	.+2      	; 0xa78 <_ZN7OneWire5writeEhh+0x2c>
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	c6 01       	movw	r24, r12
     a7a:	49 83       	std	Y+1, r20	; 0x01
     a7c:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN7OneWire9write_bitEh>
     a80:	ff 0c       	add	r15, r15
     a82:	01 50       	subi	r16, 0x01	; 1
     a84:	11 09       	sbc	r17, r1
     a86:	49 81       	ldd	r20, Y+1	; 0x01
     a88:	01 15       	cp	r16, r1
     a8a:	11 05       	cpc	r17, r1
     a8c:	81 f7       	brne	.-32     	; 0xa6e <_ZN7OneWire5writeEhh+0x22>
     a8e:	41 11       	cpse	r20, r1
     a90:	15 c0       	rjmp	.+42     	; 0xabc <_ZN7OneWire5writeEhh+0x70>
     a92:	f8 94       	cli
     a94:	d6 01       	movw	r26, r12
     a96:	11 96       	adiw	r26, 0x01	; 1
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	12 97       	sbiw	r26, 0x02	; 2
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	8c 91       	ld	r24, X
     aa2:	80 95       	com	r24
     aa4:	89 23       	and	r24, r25
     aa6:	81 83       	std	Z+1, r24	; 0x01
     aa8:	11 96       	adiw	r26, 0x01	; 1
     aaa:	ed 91       	ld	r30, X+
     aac:	fc 91       	ld	r31, X
     aae:	12 97       	sbiw	r26, 0x02	; 2
     ab0:	92 81       	ldd	r25, Z+2	; 0x02
     ab2:	8c 91       	ld	r24, X
     ab4:	80 95       	com	r24
     ab6:	89 23       	and	r24, r25
     ab8:	82 83       	std	Z+2, r24	; 0x02
     aba:	78 94       	sei
     abc:	0f 90       	pop	r0
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	08 95       	ret

00000ad0 <_ZN7OneWire4readEv>:
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	7c 01       	movw	r14, r24
     ade:	08 e0       	ldi	r16, 0x08	; 8
     ae0:	10 e0       	ldi	r17, 0x00	; 0
     ae2:	c0 e0       	ldi	r28, 0x00	; 0
     ae4:	d1 e0       	ldi	r29, 0x01	; 1
     ae6:	c7 01       	movw	r24, r14
     ae8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN7OneWire8read_bitEv>
     aec:	81 11       	cpse	r24, r1
     aee:	cd 2b       	or	r28, r29
     af0:	dd 0f       	add	r29, r29
     af2:	01 50       	subi	r16, 0x01	; 1
     af4:	11 09       	sbc	r17, r1
     af6:	b9 f7       	brne	.-18     	; 0xae6 <_ZN7OneWire4readEv+0x16>
     af8:	8c 2f       	mov	r24, r28
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	08 95       	ret

00000b08 <_ZN7OneWire6selectEPKh>:
     b08:	cf 92       	push	r12
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	1f 92       	push	r1
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	8c 01       	movw	r16, r24
     b20:	f6 2e       	mov	r15, r22
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	65 e5       	ldi	r22, 0x55	; 85
     b26:	79 83       	std	Y+1, r23	; 0x01
     b28:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN7OneWire5writeEhh>
     b2c:	cf 2c       	mov	r12, r15
     b2e:	79 81       	ldd	r23, Y+1	; 0x01
     b30:	d7 2e       	mov	r13, r23
     b32:	76 01       	movw	r14, r12
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	e8 0e       	add	r14, r24
     b38:	f1 1c       	adc	r15, r1
     b3a:	f6 01       	movw	r30, r12
     b3c:	61 91       	ld	r22, Z+
     b3e:	6f 01       	movw	r12, r30
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	c8 01       	movw	r24, r16
     b44:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN7OneWire5writeEhh>
     b48:	ce 14       	cp	r12, r14
     b4a:	df 04       	cpc	r13, r15
     b4c:	b1 f7       	brne	.-20     	; 0xb3a <_ZN7OneWire6selectEPKh+0x32>
     b4e:	0f 90       	pop	r0
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	08 95       	ret

00000b62 <_ZN7OneWire12reset_searchEv>:
     b62:	fc 01       	movw	r30, r24
     b64:	13 86       	std	Z+11, r1	; 0x0b
     b66:	15 86       	std	Z+13, r1	; 0x0d
     b68:	14 86       	std	Z+12, r1	; 0x0c
     b6a:	dc 01       	movw	r26, r24
     b6c:	1b 96       	adiw	r26, 0x0b	; 11
     b6e:	33 96       	adiw	r30, 0x03	; 3
     b70:	1e 92       	st	-X, r1
     b72:	ae 17       	cp	r26, r30
     b74:	bf 07       	cpc	r27, r31
     b76:	e1 f7       	brne	.-8      	; 0xb70 <_ZN7OneWire12reset_searchEv+0xe>
     b78:	08 95       	ret

00000b7a <_ZN7OneWireC1Eh>:
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	8c 01       	movw	r16, r24
     b82:	c6 2f       	mov	r28, r22
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	8c 2f       	mov	r24, r28
     b88:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>
     b8c:	6c 2f       	mov	r22, r28
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	fb 01       	movw	r30, r22
     b92:	e4 58       	subi	r30, 0x84	; 132
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	e4 91       	lpm	r30, Z
     b98:	d8 01       	movw	r26, r16
     b9a:	ec 93       	st	X, r30
     b9c:	fb 01       	movw	r30, r22
     b9e:	e0 57       	subi	r30, 0x70	; 112
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	e4 91       	lpm	r30, Z
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	ec 55       	subi	r30, 0x5C	; 92
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	85 91       	lpm	r24, Z+
     bb0:	94 91       	lpm	r25, Z
     bb2:	f8 01       	movw	r30, r16
     bb4:	92 83       	std	Z+2, r25	; 0x02
     bb6:	81 83       	std	Z+1, r24	; 0x01
     bb8:	c8 01       	movw	r24, r16
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <_ZN7OneWire12reset_searchEv>

00000bc4 <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     bc4:	af 92       	push	r10
     bc6:	bf 92       	push	r11
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	1f 92       	push	r1
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	5c 01       	movw	r10, r24
     be0:	d6 2e       	mov	r13, r22
     be2:	e7 2e       	mov	r14, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
     be4:	fc 01       	movw	r30, r24
     be6:	85 85       	ldd	r24, Z+13	; 0x0d
     be8:	81 11       	cpse	r24, r1
     bea:	07 c0       	rjmp	.+14     	; 0xbfa <_ZN7OneWire6searchEPhb+0x36>
   {
      // 1-Wire reset
      if (!reset())
     bec:	c5 01       	movw	r24, r10
     bee:	49 83       	std	Y+1, r20	; 0x01
     bf0:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7OneWire5resetEv>
     bf4:	49 81       	ldd	r20, Y+1	; 0x01
     bf6:	81 11       	cpse	r24, r1
     bf8:	06 c0       	rjmp	.+12     	; 0xc06 <_ZN7OneWire6searchEPhb+0x42>
      {
         // reset the search
         LastDiscrepancy = 0;
     bfa:	f5 01       	movw	r30, r10
     bfc:	13 86       	std	Z+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
     bfe:	15 86       	std	Z+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
     c00:	14 86       	std	Z+12, r1	; 0x0c
         return FALSE;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	6a c0       	rjmp	.+212    	; 0xcda <_ZN7OneWire6searchEPhb+0x116>
      }

      // issue the search command
      if (search_mode == true) {
     c06:	44 23       	and	r20, r20
     c08:	19 f0       	breq	.+6      	; 0xc10 <_ZN7OneWire6searchEPhb+0x4c>
        write(0xF0);   // NORMAL SEARCH
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	60 ef       	ldi	r22, 0xF0	; 240
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <_ZN7OneWire6searchEPhb+0x50>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	6c ee       	ldi	r22, 0xEC	; 236
     c14:	c5 01       	movw	r24, r10
     c16:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     c1a:	01 e0       	ldi	r16, 0x01	; 1
     c1c:	f1 2c       	mov	r15, r1
     c1e:	c1 2c       	mov	r12, r1
     c20:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
     c22:	c5 01       	movw	r24, r10
     c24:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN7OneWire8read_bitEv>
     c28:	68 2f       	mov	r22, r24
         cmp_id_bit = read_bit();
     c2a:	c5 01       	movw	r24, r10
     c2c:	69 83       	std	Y+1, r22	; 0x01
     c2e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
     c32:	69 81       	ldd	r22, Y+1	; 0x01
     c34:	61 30       	cpi	r22, 0x01	; 1
     c36:	19 f4       	brne	.+6      	; 0xc3e <_ZN7OneWire6searchEPhb+0x7a>
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	b9 f4       	brne	.+46     	; 0xc6a <_ZN7OneWire6searchEPhb+0xa6>
     c3c:	33 c0       	rjmp	.+102    	; 0xca4 <_ZN7OneWire6searchEPhb+0xe0>
     c3e:	4f 2d       	mov	r20, r15
     c40:	50 e0       	ldi	r21, 0x00	; 0
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
     c42:	68 13       	cpse	r22, r24
     c44:	1b c0       	rjmp	.+54     	; 0xc7c <_ZN7OneWire6searchEPhb+0xb8>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
     c46:	f5 01       	movw	r30, r10
     c48:	83 85       	ldd	r24, Z+11	; 0x0b
     c4a:	18 17       	cp	r17, r24
     c4c:	30 f4       	brcc	.+12     	; 0xc5a <_ZN7OneWire6searchEPhb+0x96>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     c4e:	e4 0f       	add	r30, r20
     c50:	f5 1f       	adc	r31, r21
     c52:	83 81       	ldd	r24, Z+3	; 0x03
     c54:	80 23       	and	r24, r16
     c56:	49 f4       	brne	.+18     	; 0xc6a <_ZN7OneWire6searchEPhb+0xa6>
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <_ZN7OneWire6searchEPhb+0x9a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
     c5a:	18 17       	cp	r17, r24
     c5c:	31 f0       	breq	.+12     	; 0xc6a <_ZN7OneWire6searchEPhb+0xa6>
     c5e:	60 e0       	ldi	r22, 0x00	; 0
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
     c60:	19 30       	cpi	r17, 0x09	; 9
     c62:	58 f4       	brcc	.+22     	; 0xc7a <_ZN7OneWire6searchEPhb+0xb6>
                     LastFamilyDiscrepancy = last_zero;
     c64:	f5 01       	movw	r30, r10
     c66:	14 87       	std	Z+12, r17	; 0x0c
     c68:	08 c0       	rjmp	.+16     	; 0xc7a <_ZN7OneWire6searchEPhb+0xb6>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
     c6a:	f5 01       	movw	r30, r10
     c6c:	ef 0d       	add	r30, r15
     c6e:	f1 1d       	adc	r31, r1
     c70:	83 81       	ldd	r24, Z+3	; 0x03
     c72:	80 2b       	or	r24, r16
     c74:	83 83       	std	Z+3, r24	; 0x03
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <_ZN7OneWire6searchEPhb+0xc8>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     c7a:	c1 2e       	mov	r12, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     c7c:	f5 01       	movw	r30, r10
     c7e:	e4 0f       	add	r30, r20
     c80:	f5 1f       	adc	r31, r21
     c82:	93 81       	ldd	r25, Z+3	; 0x03
     c84:	80 2f       	mov	r24, r16
     c86:	80 95       	com	r24
     c88:	89 23       	and	r24, r25
     c8a:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
     c8c:	c5 01       	movw	r24, r10
     c8e:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
     c92:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
     c94:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
     c96:	11 f4       	brne	.+4      	; 0xc9c <_ZN7OneWire6searchEPhb+0xd8>
            {
                rom_byte_number++;
     c98:	f3 94       	inc	r15
                rom_byte_mask = 1;
     c9a:	01 e0       	ldi	r16, 0x01	; 1
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
      }

      // loop to do the search
      do
     c9c:	f7 e0       	ldi	r31, 0x07	; 7
     c9e:	ff 15       	cp	r31, r15
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <_ZN7OneWire6searchEPhb+0xe0>
     ca2:	bf cf       	rjmp	.-130    	; 0xc22 <_ZN7OneWire6searchEPhb+0x5e>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
     ca4:	11 34       	cpi	r17, 0x41	; 65
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <_ZN7OneWire6searchEPhb+0xe6>
     ca8:	a8 cf       	rjmp	.-176    	; 0xbfa <_ZN7OneWire6searchEPhb+0x36>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
     caa:	f5 01       	movw	r30, r10
     cac:	c3 86       	std	Z+11, r12	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
     cae:	c1 10       	cpse	r12, r1
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <_ZN7OneWire6searchEPhb+0xf2>
            LastDeviceFlag = TRUE;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	85 87       	std	Z+13, r24	; 0x0d
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
     cb6:	f5 01       	movw	r30, r10
     cb8:	83 81       	ldd	r24, Z+3	; 0x03
     cba:	88 23       	and	r24, r24
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <_ZN7OneWire6searchEPhb+0xfc>
     cbe:	9d cf       	rjmp	.-198    	; 0xbfa <_ZN7OneWire6searchEPhb+0x36>
     cc0:	d5 01       	movw	r26, r10
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	ed 2d       	mov	r30, r13
     cc6:	fe 2d       	mov	r31, r14
     cc8:	95 01       	movw	r18, r10
     cca:	25 5f       	subi	r18, 0xF5	; 245
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
      LastDiscrepancy = 0;
      LastDeviceFlag = FALSE;
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
     cce:	8d 91       	ld	r24, X+
     cd0:	81 93       	st	Z+, r24
     cd2:	a2 17       	cp	r26, r18
     cd4:	b3 07       	cpc	r27, r19
     cd6:	d9 f7       	brne	.-10     	; 0xcce <_ZN7OneWire6searchEPhb+0x10a>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
   }
   return search_result;
  }
     cda:	0f 90       	pop	r0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	08 95       	ret

00000cf2 <__subsf3>:
     cf2:	50 58       	subi	r21, 0x80	; 128

00000cf4 <__addsf3>:
     cf4:	bb 27       	eor	r27, r27
     cf6:	aa 27       	eor	r26, r26
     cf8:	0e 94 91 06 	call	0xd22	; 0xd22 <__addsf3x>
     cfc:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_round>
     d00:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_pscA>
     d04:	38 f0       	brcs	.+14     	; 0xd14 <__addsf3+0x20>
     d06:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__fp_pscB>
     d0a:	20 f0       	brcs	.+8      	; 0xd14 <__addsf3+0x20>
     d0c:	39 f4       	brne	.+14     	; 0xd1c <__addsf3+0x28>
     d0e:	9f 3f       	cpi	r25, 0xFF	; 255
     d10:	19 f4       	brne	.+6      	; 0xd18 <__addsf3+0x24>
     d12:	26 f4       	brtc	.+8      	; 0xd1c <__addsf3+0x28>
     d14:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_nan>
     d18:	0e f4       	brtc	.+2      	; 0xd1c <__addsf3+0x28>
     d1a:	e0 95       	com	r30
     d1c:	e7 fb       	bst	r30, 7
     d1e:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_inf>

00000d22 <__addsf3x>:
     d22:	e9 2f       	mov	r30, r25
     d24:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fp_split3>
     d28:	58 f3       	brcs	.-42     	; 0xd00 <__addsf3+0xc>
     d2a:	ba 17       	cp	r27, r26
     d2c:	62 07       	cpc	r22, r18
     d2e:	73 07       	cpc	r23, r19
     d30:	84 07       	cpc	r24, r20
     d32:	95 07       	cpc	r25, r21
     d34:	20 f0       	brcs	.+8      	; 0xd3e <__addsf3x+0x1c>
     d36:	79 f4       	brne	.+30     	; 0xd56 <__addsf3x+0x34>
     d38:	a6 f5       	brtc	.+104    	; 0xda2 <__addsf3x+0x80>
     d3a:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__fp_zero>
     d3e:	0e f4       	brtc	.+2      	; 0xd42 <__addsf3x+0x20>
     d40:	e0 95       	com	r30
     d42:	0b 2e       	mov	r0, r27
     d44:	ba 2f       	mov	r27, r26
     d46:	a0 2d       	mov	r26, r0
     d48:	0b 01       	movw	r0, r22
     d4a:	b9 01       	movw	r22, r18
     d4c:	90 01       	movw	r18, r0
     d4e:	0c 01       	movw	r0, r24
     d50:	ca 01       	movw	r24, r20
     d52:	a0 01       	movw	r20, r0
     d54:	11 24       	eor	r1, r1
     d56:	ff 27       	eor	r31, r31
     d58:	59 1b       	sub	r21, r25
     d5a:	99 f0       	breq	.+38     	; 0xd82 <__addsf3x+0x60>
     d5c:	59 3f       	cpi	r21, 0xF9	; 249
     d5e:	50 f4       	brcc	.+20     	; 0xd74 <__addsf3x+0x52>
     d60:	50 3e       	cpi	r21, 0xE0	; 224
     d62:	68 f1       	brcs	.+90     	; 0xdbe <__addsf3x+0x9c>
     d64:	1a 16       	cp	r1, r26
     d66:	f0 40       	sbci	r31, 0x00	; 0
     d68:	a2 2f       	mov	r26, r18
     d6a:	23 2f       	mov	r18, r19
     d6c:	34 2f       	mov	r19, r20
     d6e:	44 27       	eor	r20, r20
     d70:	58 5f       	subi	r21, 0xF8	; 248
     d72:	f3 cf       	rjmp	.-26     	; 0xd5a <__addsf3x+0x38>
     d74:	46 95       	lsr	r20
     d76:	37 95       	ror	r19
     d78:	27 95       	ror	r18
     d7a:	a7 95       	ror	r26
     d7c:	f0 40       	sbci	r31, 0x00	; 0
     d7e:	53 95       	inc	r21
     d80:	c9 f7       	brne	.-14     	; 0xd74 <__addsf3x+0x52>
     d82:	7e f4       	brtc	.+30     	; 0xda2 <__addsf3x+0x80>
     d84:	1f 16       	cp	r1, r31
     d86:	ba 0b       	sbc	r27, r26
     d88:	62 0b       	sbc	r22, r18
     d8a:	73 0b       	sbc	r23, r19
     d8c:	84 0b       	sbc	r24, r20
     d8e:	ba f0       	brmi	.+46     	; 0xdbe <__addsf3x+0x9c>
     d90:	91 50       	subi	r25, 0x01	; 1
     d92:	a1 f0       	breq	.+40     	; 0xdbc <__addsf3x+0x9a>
     d94:	ff 0f       	add	r31, r31
     d96:	bb 1f       	adc	r27, r27
     d98:	66 1f       	adc	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	c2 f7       	brpl	.-16     	; 0xd90 <__addsf3x+0x6e>
     da0:	0e c0       	rjmp	.+28     	; 0xdbe <__addsf3x+0x9c>
     da2:	ba 0f       	add	r27, r26
     da4:	62 1f       	adc	r22, r18
     da6:	73 1f       	adc	r23, r19
     da8:	84 1f       	adc	r24, r20
     daa:	48 f4       	brcc	.+18     	; 0xdbe <__addsf3x+0x9c>
     dac:	87 95       	ror	r24
     dae:	77 95       	ror	r23
     db0:	67 95       	ror	r22
     db2:	b7 95       	ror	r27
     db4:	f7 95       	ror	r31
     db6:	9e 3f       	cpi	r25, 0xFE	; 254
     db8:	08 f0       	brcs	.+2      	; 0xdbc <__addsf3x+0x9a>
     dba:	b0 cf       	rjmp	.-160    	; 0xd1c <__addsf3+0x28>
     dbc:	93 95       	inc	r25
     dbe:	88 0f       	add	r24, r24
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <__addsf3x+0xa2>
     dc2:	99 27       	eor	r25, r25
     dc4:	ee 0f       	add	r30, r30
     dc6:	97 95       	ror	r25
     dc8:	87 95       	ror	r24
     dca:	08 95       	ret

00000dcc <__divsf3>:
     dcc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__divsf3x>
     dd0:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_round>
     dd4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__fp_pscB>
     dd8:	58 f0       	brcs	.+22     	; 0xdf0 <__divsf3+0x24>
     dda:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_pscA>
     dde:	40 f0       	brcs	.+16     	; 0xdf0 <__divsf3+0x24>
     de0:	29 f4       	brne	.+10     	; 0xdec <__divsf3+0x20>
     de2:	5f 3f       	cpi	r21, 0xFF	; 255
     de4:	29 f0       	breq	.+10     	; 0xdf0 <__divsf3+0x24>
     de6:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_inf>
     dea:	51 11       	cpse	r21, r1
     dec:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_szero>
     df0:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_nan>

00000df4 <__divsf3x>:
     df4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fp_split3>
     df8:	68 f3       	brcs	.-38     	; 0xdd4 <__divsf3+0x8>

00000dfa <__divsf3_pse>:
     dfa:	99 23       	and	r25, r25
     dfc:	b1 f3       	breq	.-20     	; 0xdea <__divsf3+0x1e>
     dfe:	55 23       	and	r21, r21
     e00:	91 f3       	breq	.-28     	; 0xde6 <__divsf3+0x1a>
     e02:	95 1b       	sub	r25, r21
     e04:	55 0b       	sbc	r21, r21
     e06:	bb 27       	eor	r27, r27
     e08:	aa 27       	eor	r26, r26
     e0a:	62 17       	cp	r22, r18
     e0c:	73 07       	cpc	r23, r19
     e0e:	84 07       	cpc	r24, r20
     e10:	38 f0       	brcs	.+14     	; 0xe20 <__divsf3_pse+0x26>
     e12:	9f 5f       	subi	r25, 0xFF	; 255
     e14:	5f 4f       	sbci	r21, 0xFF	; 255
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	44 1f       	adc	r20, r20
     e1c:	aa 1f       	adc	r26, r26
     e1e:	a9 f3       	breq	.-22     	; 0xe0a <__divsf3_pse+0x10>
     e20:	35 d0       	rcall	.+106    	; 0xe8c <__divsf3_pse+0x92>
     e22:	0e 2e       	mov	r0, r30
     e24:	3a f0       	brmi	.+14     	; 0xe34 <__divsf3_pse+0x3a>
     e26:	e0 e8       	ldi	r30, 0x80	; 128
     e28:	32 d0       	rcall	.+100    	; 0xe8e <__divsf3_pse+0x94>
     e2a:	91 50       	subi	r25, 0x01	; 1
     e2c:	50 40       	sbci	r21, 0x00	; 0
     e2e:	e6 95       	lsr	r30
     e30:	00 1c       	adc	r0, r0
     e32:	ca f7       	brpl	.-14     	; 0xe26 <__divsf3_pse+0x2c>
     e34:	2b d0       	rcall	.+86     	; 0xe8c <__divsf3_pse+0x92>
     e36:	fe 2f       	mov	r31, r30
     e38:	29 d0       	rcall	.+82     	; 0xe8c <__divsf3_pse+0x92>
     e3a:	66 0f       	add	r22, r22
     e3c:	77 1f       	adc	r23, r23
     e3e:	88 1f       	adc	r24, r24
     e40:	bb 1f       	adc	r27, r27
     e42:	26 17       	cp	r18, r22
     e44:	37 07       	cpc	r19, r23
     e46:	48 07       	cpc	r20, r24
     e48:	ab 07       	cpc	r26, r27
     e4a:	b0 e8       	ldi	r27, 0x80	; 128
     e4c:	09 f0       	breq	.+2      	; 0xe50 <__divsf3_pse+0x56>
     e4e:	bb 0b       	sbc	r27, r27
     e50:	80 2d       	mov	r24, r0
     e52:	bf 01       	movw	r22, r30
     e54:	ff 27       	eor	r31, r31
     e56:	93 58       	subi	r25, 0x83	; 131
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	3a f0       	brmi	.+14     	; 0xe6a <__divsf3_pse+0x70>
     e5c:	9e 3f       	cpi	r25, 0xFE	; 254
     e5e:	51 05       	cpc	r21, r1
     e60:	78 f0       	brcs	.+30     	; 0xe80 <__divsf3_pse+0x86>
     e62:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_inf>
     e66:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_szero>
     e6a:	5f 3f       	cpi	r21, 0xFF	; 255
     e6c:	e4 f3       	brlt	.-8      	; 0xe66 <__divsf3_pse+0x6c>
     e6e:	98 3e       	cpi	r25, 0xE8	; 232
     e70:	d4 f3       	brlt	.-12     	; 0xe66 <__divsf3_pse+0x6c>
     e72:	86 95       	lsr	r24
     e74:	77 95       	ror	r23
     e76:	67 95       	ror	r22
     e78:	b7 95       	ror	r27
     e7a:	f7 95       	ror	r31
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__divsf3_pse+0x78>
     e80:	88 0f       	add	r24, r24
     e82:	91 1d       	adc	r25, r1
     e84:	96 95       	lsr	r25
     e86:	87 95       	ror	r24
     e88:	97 f9       	bld	r25, 7
     e8a:	08 95       	ret
     e8c:	e1 e0       	ldi	r30, 0x01	; 1
     e8e:	66 0f       	add	r22, r22
     e90:	77 1f       	adc	r23, r23
     e92:	88 1f       	adc	r24, r24
     e94:	bb 1f       	adc	r27, r27
     e96:	62 17       	cp	r22, r18
     e98:	73 07       	cpc	r23, r19
     e9a:	84 07       	cpc	r24, r20
     e9c:	ba 07       	cpc	r27, r26
     e9e:	20 f0       	brcs	.+8      	; 0xea8 <__divsf3_pse+0xae>
     ea0:	62 1b       	sub	r22, r18
     ea2:	73 0b       	sbc	r23, r19
     ea4:	84 0b       	sbc	r24, r20
     ea6:	ba 0b       	sbc	r27, r26
     ea8:	ee 1f       	adc	r30, r30
     eaa:	88 f7       	brcc	.-30     	; 0xe8e <__divsf3_pse+0x94>
     eac:	e0 95       	com	r30
     eae:	08 95       	ret

00000eb0 <__floatunsisf>:
     eb0:	e8 94       	clt
     eb2:	09 c0       	rjmp	.+18     	; 0xec6 <__floatsisf+0x12>

00000eb4 <__floatsisf>:
     eb4:	97 fb       	bst	r25, 7
     eb6:	3e f4       	brtc	.+14     	; 0xec6 <__floatsisf+0x12>
     eb8:	90 95       	com	r25
     eba:	80 95       	com	r24
     ebc:	70 95       	com	r23
     ebe:	61 95       	neg	r22
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	8f 4f       	sbci	r24, 0xFF	; 255
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	99 23       	and	r25, r25
     ec8:	a9 f0       	breq	.+42     	; 0xef4 <__floatsisf+0x40>
     eca:	f9 2f       	mov	r31, r25
     ecc:	96 e9       	ldi	r25, 0x96	; 150
     ece:	bb 27       	eor	r27, r27
     ed0:	93 95       	inc	r25
     ed2:	f6 95       	lsr	r31
     ed4:	87 95       	ror	r24
     ed6:	77 95       	ror	r23
     ed8:	67 95       	ror	r22
     eda:	b7 95       	ror	r27
     edc:	f1 11       	cpse	r31, r1
     ede:	f8 cf       	rjmp	.-16     	; 0xed0 <__floatsisf+0x1c>
     ee0:	fa f4       	brpl	.+62     	; 0xf20 <__floatsisf+0x6c>
     ee2:	bb 0f       	add	r27, r27
     ee4:	11 f4       	brne	.+4      	; 0xeea <__floatsisf+0x36>
     ee6:	60 ff       	sbrs	r22, 0
     ee8:	1b c0       	rjmp	.+54     	; 0xf20 <__floatsisf+0x6c>
     eea:	6f 5f       	subi	r22, 0xFF	; 255
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	16 c0       	rjmp	.+44     	; 0xf20 <__floatsisf+0x6c>
     ef4:	88 23       	and	r24, r24
     ef6:	11 f0       	breq	.+4      	; 0xefc <__floatsisf+0x48>
     ef8:	96 e9       	ldi	r25, 0x96	; 150
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <__floatsisf+0x6a>
     efc:	77 23       	and	r23, r23
     efe:	21 f0       	breq	.+8      	; 0xf08 <__floatsisf+0x54>
     f00:	9e e8       	ldi	r25, 0x8E	; 142
     f02:	87 2f       	mov	r24, r23
     f04:	76 2f       	mov	r23, r22
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <__floatsisf+0x5e>
     f08:	66 23       	and	r22, r22
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__floatsisf+0x74>
     f0c:	96 e8       	ldi	r25, 0x86	; 134
     f0e:	86 2f       	mov	r24, r22
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	2a f0       	brmi	.+10     	; 0xf20 <__floatsisf+0x6c>
     f16:	9a 95       	dec	r25
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	da f7       	brpl	.-10     	; 0xf16 <__floatsisf+0x62>
     f20:	88 0f       	add	r24, r24
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	97 f9       	bld	r25, 7
     f28:	08 95       	ret

00000f2a <__fp_inf>:
     f2a:	97 f9       	bld	r25, 7
     f2c:	9f 67       	ori	r25, 0x7F	; 127
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	08 95       	ret

00000f36 <__fp_nan>:
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	80 ec       	ldi	r24, 0xC0	; 192
     f3a:	08 95       	ret

00000f3c <__fp_pscA>:
     f3c:	00 24       	eor	r0, r0
     f3e:	0a 94       	dec	r0
     f40:	16 16       	cp	r1, r22
     f42:	17 06       	cpc	r1, r23
     f44:	18 06       	cpc	r1, r24
     f46:	09 06       	cpc	r0, r25
     f48:	08 95       	ret

00000f4a <__fp_pscB>:
     f4a:	00 24       	eor	r0, r0
     f4c:	0a 94       	dec	r0
     f4e:	12 16       	cp	r1, r18
     f50:	13 06       	cpc	r1, r19
     f52:	14 06       	cpc	r1, r20
     f54:	05 06       	cpc	r0, r21
     f56:	08 95       	ret

00000f58 <__fp_round>:
     f58:	09 2e       	mov	r0, r25
     f5a:	03 94       	inc	r0
     f5c:	00 0c       	add	r0, r0
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__fp_round+0xc>
     f60:	88 23       	and	r24, r24
     f62:	52 f0       	brmi	.+20     	; 0xf78 <__fp_round+0x20>
     f64:	bb 0f       	add	r27, r27
     f66:	40 f4       	brcc	.+16     	; 0xf78 <__fp_round+0x20>
     f68:	bf 2b       	or	r27, r31
     f6a:	11 f4       	brne	.+4      	; 0xf70 <__fp_round+0x18>
     f6c:	60 ff       	sbrs	r22, 0
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <__fp_round+0x20>
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	8f 4f       	sbci	r24, 0xFF	; 255
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	08 95       	ret

00000f7a <__fp_split3>:
     f7a:	57 fd       	sbrc	r21, 7
     f7c:	90 58       	subi	r25, 0x80	; 128
     f7e:	44 0f       	add	r20, r20
     f80:	55 1f       	adc	r21, r21
     f82:	59 f0       	breq	.+22     	; 0xf9a <__fp_splitA+0x10>
     f84:	5f 3f       	cpi	r21, 0xFF	; 255
     f86:	71 f0       	breq	.+28     	; 0xfa4 <__fp_splitA+0x1a>
     f88:	47 95       	ror	r20

00000f8a <__fp_splitA>:
     f8a:	88 0f       	add	r24, r24
     f8c:	97 fb       	bst	r25, 7
     f8e:	99 1f       	adc	r25, r25
     f90:	61 f0       	breq	.+24     	; 0xfaa <__fp_splitA+0x20>
     f92:	9f 3f       	cpi	r25, 0xFF	; 255
     f94:	79 f0       	breq	.+30     	; 0xfb4 <__fp_splitA+0x2a>
     f96:	87 95       	ror	r24
     f98:	08 95       	ret
     f9a:	12 16       	cp	r1, r18
     f9c:	13 06       	cpc	r1, r19
     f9e:	14 06       	cpc	r1, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	f2 cf       	rjmp	.-28     	; 0xf88 <__fp_split3+0xe>
     fa4:	46 95       	lsr	r20
     fa6:	f1 df       	rcall	.-30     	; 0xf8a <__fp_splitA>
     fa8:	08 c0       	rjmp	.+16     	; 0xfba <__fp_splitA+0x30>
     faa:	16 16       	cp	r1, r22
     fac:	17 06       	cpc	r1, r23
     fae:	18 06       	cpc	r1, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	f1 cf       	rjmp	.-30     	; 0xf96 <__fp_splitA+0xc>
     fb4:	86 95       	lsr	r24
     fb6:	71 05       	cpc	r23, r1
     fb8:	61 05       	cpc	r22, r1
     fba:	08 94       	sec
     fbc:	08 95       	ret

00000fbe <__fp_zero>:
     fbe:	e8 94       	clt

00000fc0 <__fp_szero>:
     fc0:	bb 27       	eor	r27, r27
     fc2:	66 27       	eor	r22, r22
     fc4:	77 27       	eor	r23, r23
     fc6:	cb 01       	movw	r24, r22
     fc8:	97 f9       	bld	r25, 7
     fca:	08 95       	ret

00000fcc <__gesf2>:
     fcc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_cmp>
     fd0:	08 f4       	brcc	.+2      	; 0xfd4 <__gesf2+0x8>
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	08 95       	ret

00000fd6 <__mulsf3>:
     fd6:	0e 94 fe 07 	call	0xffc	; 0xffc <__mulsf3x>
     fda:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_round>
     fde:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_pscA>
     fe2:	38 f0       	brcs	.+14     	; 0xff2 <__mulsf3+0x1c>
     fe4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__fp_pscB>
     fe8:	20 f0       	brcs	.+8      	; 0xff2 <__mulsf3+0x1c>
     fea:	95 23       	and	r25, r21
     fec:	11 f0       	breq	.+4      	; 0xff2 <__mulsf3+0x1c>
     fee:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_inf>
     ff2:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_nan>
     ff6:	11 24       	eor	r1, r1
     ff8:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_szero>

00000ffc <__mulsf3x>:
     ffc:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fp_split3>
    1000:	70 f3       	brcs	.-36     	; 0xfde <__mulsf3+0x8>

00001002 <__mulsf3_pse>:
    1002:	95 9f       	mul	r25, r21
    1004:	c1 f3       	breq	.-16     	; 0xff6 <__mulsf3+0x20>
    1006:	95 0f       	add	r25, r21
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	55 1f       	adc	r21, r21
    100c:	62 9f       	mul	r22, r18
    100e:	f0 01       	movw	r30, r0
    1010:	72 9f       	mul	r23, r18
    1012:	bb 27       	eor	r27, r27
    1014:	f0 0d       	add	r31, r0
    1016:	b1 1d       	adc	r27, r1
    1018:	63 9f       	mul	r22, r19
    101a:	aa 27       	eor	r26, r26
    101c:	f0 0d       	add	r31, r0
    101e:	b1 1d       	adc	r27, r1
    1020:	aa 1f       	adc	r26, r26
    1022:	64 9f       	mul	r22, r20
    1024:	66 27       	eor	r22, r22
    1026:	b0 0d       	add	r27, r0
    1028:	a1 1d       	adc	r26, r1
    102a:	66 1f       	adc	r22, r22
    102c:	82 9f       	mul	r24, r18
    102e:	22 27       	eor	r18, r18
    1030:	b0 0d       	add	r27, r0
    1032:	a1 1d       	adc	r26, r1
    1034:	62 1f       	adc	r22, r18
    1036:	73 9f       	mul	r23, r19
    1038:	b0 0d       	add	r27, r0
    103a:	a1 1d       	adc	r26, r1
    103c:	62 1f       	adc	r22, r18
    103e:	83 9f       	mul	r24, r19
    1040:	a0 0d       	add	r26, r0
    1042:	61 1d       	adc	r22, r1
    1044:	22 1f       	adc	r18, r18
    1046:	74 9f       	mul	r23, r20
    1048:	33 27       	eor	r19, r19
    104a:	a0 0d       	add	r26, r0
    104c:	61 1d       	adc	r22, r1
    104e:	23 1f       	adc	r18, r19
    1050:	84 9f       	mul	r24, r20
    1052:	60 0d       	add	r22, r0
    1054:	21 1d       	adc	r18, r1
    1056:	82 2f       	mov	r24, r18
    1058:	76 2f       	mov	r23, r22
    105a:	6a 2f       	mov	r22, r26
    105c:	11 24       	eor	r1, r1
    105e:	9f 57       	subi	r25, 0x7F	; 127
    1060:	50 40       	sbci	r21, 0x00	; 0
    1062:	9a f0       	brmi	.+38     	; 0x108a <__mulsf3_pse+0x88>
    1064:	f1 f0       	breq	.+60     	; 0x10a2 <__mulsf3_pse+0xa0>
    1066:	88 23       	and	r24, r24
    1068:	4a f0       	brmi	.+18     	; 0x107c <__mulsf3_pse+0x7a>
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	bb 1f       	adc	r27, r27
    1070:	66 1f       	adc	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	91 50       	subi	r25, 0x01	; 1
    1078:	50 40       	sbci	r21, 0x00	; 0
    107a:	a9 f7       	brne	.-22     	; 0x1066 <__mulsf3_pse+0x64>
    107c:	9e 3f       	cpi	r25, 0xFE	; 254
    107e:	51 05       	cpc	r21, r1
    1080:	80 f0       	brcs	.+32     	; 0x10a2 <__mulsf3_pse+0xa0>
    1082:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_inf>
    1086:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_szero>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	e4 f3       	brlt	.-8      	; 0x1086 <__mulsf3_pse+0x84>
    108e:	98 3e       	cpi	r25, 0xE8	; 232
    1090:	d4 f3       	brlt	.-12     	; 0x1086 <__mulsf3_pse+0x84>
    1092:	86 95       	lsr	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f7 95       	ror	r31
    109c:	e7 95       	ror	r30
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	c1 f7       	brne	.-16     	; 0x1092 <__mulsf3_pse+0x90>
    10a2:	fe 2b       	or	r31, r30
    10a4:	88 0f       	add	r24, r24
    10a6:	91 1d       	adc	r25, r1
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <__fp_cmp>:
    10b0:	99 0f       	add	r25, r25
    10b2:	00 08       	sbc	r0, r0
    10b4:	55 0f       	add	r21, r21
    10b6:	aa 0b       	sbc	r26, r26
    10b8:	e0 e8       	ldi	r30, 0x80	; 128
    10ba:	fe ef       	ldi	r31, 0xFE	; 254
    10bc:	16 16       	cp	r1, r22
    10be:	17 06       	cpc	r1, r23
    10c0:	e8 07       	cpc	r30, r24
    10c2:	f9 07       	cpc	r31, r25
    10c4:	c0 f0       	brcs	.+48     	; 0x10f6 <__fp_cmp+0x46>
    10c6:	12 16       	cp	r1, r18
    10c8:	13 06       	cpc	r1, r19
    10ca:	e4 07       	cpc	r30, r20
    10cc:	f5 07       	cpc	r31, r21
    10ce:	98 f0       	brcs	.+38     	; 0x10f6 <__fp_cmp+0x46>
    10d0:	62 1b       	sub	r22, r18
    10d2:	73 0b       	sbc	r23, r19
    10d4:	84 0b       	sbc	r24, r20
    10d6:	95 0b       	sbc	r25, r21
    10d8:	39 f4       	brne	.+14     	; 0x10e8 <__fp_cmp+0x38>
    10da:	0a 26       	eor	r0, r26
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <__fp_cmp+0x46>
    10de:	23 2b       	or	r18, r19
    10e0:	24 2b       	or	r18, r20
    10e2:	25 2b       	or	r18, r21
    10e4:	21 f4       	brne	.+8      	; 0x10ee <__fp_cmp+0x3e>
    10e6:	08 95       	ret
    10e8:	0a 26       	eor	r0, r26
    10ea:	09 f4       	brne	.+2      	; 0x10ee <__fp_cmp+0x3e>
    10ec:	a1 40       	sbci	r26, 0x01	; 1
    10ee:	a6 95       	lsr	r26
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	81 1d       	adc	r24, r1
    10f4:	81 1d       	adc	r24, r1
    10f6:	08 95       	ret

000010f8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    10f8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    10fa:	91 8d       	ldd	r25, Z+25	; 0x19
    10fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    10fe:	89 2f       	mov	r24, r25
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	80 5c       	subi	r24, 0xC0	; 192
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	82 1b       	sub	r24, r18
    1108:	91 09       	sbc	r25, r1
}
    110a:	8f 73       	andi	r24, 0x3F	; 63
    110c:	99 27       	eor	r25, r25
    110e:	08 95       	ret

00001110 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1110:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1112:	91 8d       	ldd	r25, Z+25	; 0x19
    1114:	82 8d       	ldd	r24, Z+26	; 0x1a
    1116:	98 17       	cp	r25, r24
    1118:	31 f0       	breq	.+12     	; 0x1126 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    111a:	82 8d       	ldd	r24, Z+26	; 0x1a
    111c:	e8 0f       	add	r30, r24
    111e:	f1 1d       	adc	r31, r1
    1120:	85 8d       	ldd	r24, Z+29	; 0x1d
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1126:	8f ef       	ldi	r24, 0xFF	; 255
    1128:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    112a:	08 95       	ret

0000112c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    112c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    112e:	91 8d       	ldd	r25, Z+25	; 0x19
    1130:	82 8d       	ldd	r24, Z+26	; 0x1a
    1132:	98 17       	cp	r25, r24
    1134:	61 f0       	breq	.+24     	; 0x114e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1136:	82 8d       	ldd	r24, Z+26	; 0x1a
    1138:	df 01       	movw	r26, r30
    113a:	a8 0f       	add	r26, r24
    113c:	b1 1d       	adc	r27, r1
    113e:	5d 96       	adiw	r26, 0x1d	; 29
    1140:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1142:	92 8d       	ldd	r25, Z+26	; 0x1a
    1144:	9f 5f       	subi	r25, 0xFF	; 255
    1146:	9f 73       	andi	r25, 0x3F	; 63
    1148:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1152:	08 95       	ret

00001154 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	99 e0       	ldi	r25, 0x09	; 9
    1158:	89 2b       	or	r24, r25
    115a:	49 f0       	breq	.+18     	; 0x116e <_Z14serialEventRunv+0x1a>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	89 2b       	or	r24, r25
    1162:	29 f0       	breq	.+10     	; 0x116e <_Z14serialEventRunv+0x1a>
    1164:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_Z17Serial0_availablev>
    1168:	81 11       	cpse	r24, r1
    116a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    116e:	08 95       	ret

00001170 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1170:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1172:	84 8d       	ldd	r24, Z+28	; 0x1c
    1174:	df 01       	movw	r26, r30
    1176:	a8 0f       	add	r26, r24
    1178:	b1 1d       	adc	r27, r1
    117a:	a3 5a       	subi	r26, 0xA3	; 163
    117c:	bf 4f       	sbci	r27, 0xFF	; 255
    117e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1180:	84 8d       	ldd	r24, Z+28	; 0x1c
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	8f 73       	andi	r24, 0x3F	; 63
    1188:	99 27       	eor	r25, r25
    118a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    118c:	a6 89       	ldd	r26, Z+22	; 0x16
    118e:	b7 89       	ldd	r27, Z+23	; 0x17
    1190:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1192:	a0 89       	ldd	r26, Z+16	; 0x10
    1194:	b1 89       	ldd	r27, Z+17	; 0x11
    1196:	8c 91       	ld	r24, X
    1198:	80 64       	ori	r24, 0x40	; 64
    119a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    119c:	93 8d       	ldd	r25, Z+27	; 0x1b
    119e:	84 8d       	ldd	r24, Z+28	; 0x1c
    11a0:	98 13       	cpse	r25, r24
    11a2:	06 c0       	rjmp	.+12     	; 0x11b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    11a4:	02 88       	ldd	r0, Z+18	; 0x12
    11a6:	f3 89       	ldd	r31, Z+19	; 0x13
    11a8:	e0 2d       	mov	r30, r0
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 7d       	andi	r24, 0xDF	; 223
    11ae:	80 83       	st	Z, r24
    11b0:	08 95       	ret

000011b2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    11b8:	88 8d       	ldd	r24, Y+24	; 0x18
    11ba:	88 23       	and	r24, r24
    11bc:	c9 f0       	breq	.+50     	; 0x11f0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    11be:	ea 89       	ldd	r30, Y+18	; 0x12
    11c0:	fb 89       	ldd	r31, Y+19	; 0x13
    11c2:	80 81       	ld	r24, Z
    11c4:	85 fd       	sbrc	r24, 5
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <_ZN14HardwareSerial5flushEv+0x20>
    11c8:	a8 89       	ldd	r26, Y+16	; 0x10
    11ca:	b9 89       	ldd	r27, Y+17	; 0x11
    11cc:	8c 91       	ld	r24, X
    11ce:	86 fd       	sbrc	r24, 6
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	07 fc       	sbrc	r0, 7
    11d6:	f5 cf       	rjmp	.-22     	; 0x11c2 <_ZN14HardwareSerial5flushEv+0x10>
    11d8:	80 81       	ld	r24, Z
    11da:	85 ff       	sbrs	r24, 5
    11dc:	f2 cf       	rjmp	.-28     	; 0x11c2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    11de:	a8 89       	ldd	r26, Y+16	; 0x10
    11e0:	b9 89       	ldd	r27, Y+17	; 0x11
    11e2:	8c 91       	ld	r24, X
    11e4:	85 ff       	sbrs	r24, 5
    11e6:	ed cf       	rjmp	.-38     	; 0x11c2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11ee:	e7 cf       	rjmp	.-50     	; 0x11be <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	ec 01       	movw	r28, r24
  _written = true;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1208:	9b 8d       	ldd	r25, Y+27	; 0x1b
    120a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    120c:	98 13       	cpse	r25, r24
    120e:	05 c0       	rjmp	.+10     	; 0x121a <_ZN14HardwareSerial5writeEh+0x24>
    1210:	e8 89       	ldd	r30, Y+16	; 0x10
    1212:	f9 89       	ldd	r31, Y+17	; 0x11
    1214:	80 81       	ld	r24, Z
    1216:	85 fd       	sbrc	r24, 5
    1218:	24 c0       	rjmp	.+72     	; 0x1262 <_ZN14HardwareSerial5writeEh+0x6c>
    121a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    121c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	0f 5f       	subi	r16, 0xFF	; 255
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	0f 73       	andi	r16, 0x3F	; 63
    1226:	11 27       	eor	r17, r17
    1228:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    122a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    122c:	e8 12       	cpse	r14, r24
    122e:	0c c0       	rjmp	.+24     	; 0x1248 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	07 fc       	sbrc	r0, 7
    1234:	fa cf       	rjmp	.-12     	; 0x122a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1236:	e8 89       	ldd	r30, Y+16	; 0x10
    1238:	f9 89       	ldd	r31, Y+17	; 0x11
    123a:	80 81       	ld	r24, Z
    123c:	85 ff       	sbrs	r24, 5
    123e:	f5 cf       	rjmp	.-22     	; 0x122a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1240:	ce 01       	movw	r24, r28
    1242:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1246:	f1 cf       	rjmp	.-30     	; 0x122a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124a:	fe 01       	movw	r30, r28
    124c:	e8 0f       	add	r30, r24
    124e:	f1 1d       	adc	r31, r1
    1250:	e3 5a       	subi	r30, 0xA3	; 163
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1256:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1258:	ea 89       	ldd	r30, Y+18	; 0x12
    125a:	fb 89       	ldd	r31, Y+19	; 0x13
    125c:	80 81       	ld	r24, Z
    125e:	80 62       	ori	r24, 0x20	; 32
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1262:	ee 89       	ldd	r30, Y+22	; 0x16
    1264:	ff 89       	ldd	r31, Y+23	; 0x17
    1266:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1268:	e8 89       	ldd	r30, Y+16	; 0x10
    126a:	f9 89       	ldd	r31, Y+17	; 0x11
    126c:	80 81       	ld	r24, Z
    126e:	80 64       	ori	r24, 0x40	; 64
    1270:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	08 95       	ret

00001284 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
    1294:	6a 01       	movw	r12, r20
    1296:	7b 01       	movw	r14, r22
    1298:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    129a:	e8 89       	ldd	r30, Y+16	; 0x10
    129c:	f9 89       	ldd	r31, Y+17	; 0x11
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12a2:	41 15       	cp	r20, r1
    12a4:	51 4e       	sbci	r21, 0xE1	; 225
    12a6:	61 05       	cpc	r22, r1
    12a8:	71 05       	cpc	r23, r1
    12aa:	b1 f0       	breq	.+44     	; 0x12d8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	79 e0       	ldi	r23, 0x09	; 9
    12b0:	8d e3       	ldi	r24, 0x3D	; 61
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a7 01       	movw	r20, r14
    12b6:	96 01       	movw	r18, r12
    12b8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
    12bc:	da 01       	movw	r26, r20
    12be:	c9 01       	movw	r24, r18
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	a1 09       	sbc	r26, r1
    12c4:	b1 09       	sbc	r27, r1
    12c6:	b6 95       	lsr	r27
    12c8:	a7 95       	ror	r26
    12ca:	97 95       	ror	r25
    12cc:	87 95       	ror	r24
    12ce:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12d0:	41 15       	cp	r20, r1
    12d2:	80 e1       	ldi	r24, 0x10	; 16
    12d4:	58 07       	cpc	r21, r24
    12d6:	a8 f0       	brcs	.+42     	; 0x1302 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    12d8:	e8 89       	ldd	r30, Y+16	; 0x10
    12da:	f9 89       	ldd	r31, Y+17	; 0x11
    12dc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    12de:	60 e8       	ldi	r22, 0x80	; 128
    12e0:	74 e8       	ldi	r23, 0x84	; 132
    12e2:	8e e1       	ldi	r24, 0x1E	; 30
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a7 01       	movw	r20, r14
    12e8:	96 01       	movw	r18, r12
    12ea:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
    12ee:	ba 01       	movw	r22, r20
    12f0:	a9 01       	movw	r20, r18
    12f2:	41 50       	subi	r20, 0x01	; 1
    12f4:	51 09       	sbc	r21, r1
    12f6:	61 09       	sbc	r22, r1
    12f8:	71 09       	sbc	r23, r1
    12fa:	76 95       	lsr	r23
    12fc:	67 95       	ror	r22
    12fe:	57 95       	ror	r21
    1300:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1302:	ec 85       	ldd	r30, Y+12	; 0x0c
    1304:	fd 85       	ldd	r31, Y+13	; 0x0d
    1306:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1308:	ee 85       	ldd	r30, Y+14	; 0x0e
    130a:	ff 85       	ldd	r31, Y+15	; 0x0f
    130c:	40 83       	st	Z, r20

  _written = false;
    130e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1310:	ec 89       	ldd	r30, Y+20	; 0x14
    1312:	fd 89       	ldd	r31, Y+21	; 0x15
    1314:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1316:	ea 89       	ldd	r30, Y+18	; 0x12
    1318:	fb 89       	ldd	r31, Y+19	; 0x13
    131a:	80 81       	ld	r24, Z
    131c:	80 61       	ori	r24, 0x10	; 16
    131e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1320:	ea 89       	ldd	r30, Y+18	; 0x12
    1322:	fb 89       	ldd	r31, Y+19	; 0x13
    1324:	80 81       	ld	r24, Z
    1326:	88 60       	ori	r24, 0x08	; 8
    1328:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    132a:	ea 89       	ldd	r30, Y+18	; 0x12
    132c:	fb 89       	ldd	r31, Y+19	; 0x13
    132e:	80 81       	ld	r24, Z
    1330:	80 68       	ori	r24, 0x80	; 128
    1332:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1334:	ea 89       	ldd	r30, Y+18	; 0x12
    1336:	fb 89       	ldd	r31, Y+19	; 0x13
    1338:	80 81       	ld	r24, Z
    133a:	8f 7d       	andi	r24, 0xDF	; 223
    133c:	80 83       	st	Z, r24
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	08 95       	ret

0000134e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1362:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <Serial+0x10>
    1366:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <Serial+0x11>
    136a:	80 81       	ld	r24, Z
    136c:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <Serial+0x16>
    1370:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <Serial+0x17>
    1374:	82 fd       	sbrc	r24, 2
    1376:	12 c0       	rjmp	.+36     	; 0x139c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1378:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    137a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <Serial+0x19>
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1382:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <Serial+0x1a>
    1386:	82 17       	cp	r24, r18
    1388:	51 f0       	breq	.+20     	; 0x139e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    138a:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <Serial+0x19>
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	e6 54       	subi	r30, 0x46	; 70
    1392:	fe 4f       	sbci	r31, 0xFE	; 254
    1394:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1396:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <Serial+0x19>
    139a:	01 c0       	rjmp	.+2      	; 0x139e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    139c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti

000013b2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	2f 93       	push	r18
    13be:	3f 93       	push	r19
    13c0:	4f 93       	push	r20
    13c2:	5f 93       	push	r21
    13c4:	6f 93       	push	r22
    13c6:	7f 93       	push	r23
    13c8:	8f 93       	push	r24
    13ca:	9f 93       	push	r25
    13cc:	af 93       	push	r26
    13ce:	bf 93       	push	r27
    13d0:	ef 93       	push	r30
    13d2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    13d4:	8a eb       	ldi	r24, 0xBA	; 186
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	7f 91       	pop	r23
    13ea:	6f 91       	pop	r22
    13ec:	5f 91       	pop	r21
    13ee:	4f 91       	pop	r20
    13f0:	3f 91       	pop	r19
    13f2:	2f 91       	pop	r18
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	1f 90       	pop	r1
    13fc:	18 95       	reti

000013fe <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    13fe:	8a eb       	ldi	r24, 0xBA	; 186
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN14HardwareSerial9availableEv>
    1406:	21 e0       	ldi	r18, 0x01	; 1
    1408:	89 2b       	or	r24, r25
    140a:	09 f4       	brne	.+2      	; 0x140e <_Z17Serial0_availablev+0x10>
    140c:	20 e0       	ldi	r18, 0x00	; 0
}
    140e:	82 2f       	mov	r24, r18
    1410:	08 95       	ret

00001412 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1412:	ea eb       	ldi	r30, 0xBA	; 186
    1414:	f1 e0       	ldi	r31, 0x01	; 1
    1416:	13 82       	std	Z+3, r1	; 0x03
    1418:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    141a:	88 ee       	ldi	r24, 0xE8	; 232
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	a0 e0       	ldi	r26, 0x00	; 0
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	84 83       	std	Z+4, r24	; 0x04
    1424:	95 83       	std	Z+5, r25	; 0x05
    1426:	a6 83       	std	Z+6, r26	; 0x06
    1428:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    142a:	83 e3       	ldi	r24, 0x33	; 51
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
    1432:	85 ec       	ldi	r24, 0xC5	; 197
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	95 87       	std	Z+13, r25	; 0x0d
    1438:	84 87       	std	Z+12, r24	; 0x0c
    143a:	84 ec       	ldi	r24, 0xC4	; 196
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	97 87       	std	Z+15, r25	; 0x0f
    1440:	86 87       	std	Z+14, r24	; 0x0e
    1442:	80 ec       	ldi	r24, 0xC0	; 192
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	91 8b       	std	Z+17, r25	; 0x11
    1448:	80 8b       	std	Z+16, r24	; 0x10
    144a:	81 ec       	ldi	r24, 0xC1	; 193
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	93 8b       	std	Z+19, r25	; 0x13
    1450:	82 8b       	std	Z+18, r24	; 0x12
    1452:	82 ec       	ldi	r24, 0xC2	; 194
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	95 8b       	std	Z+21, r25	; 0x15
    1458:	84 8b       	std	Z+20, r24	; 0x14
    145a:	86 ec       	ldi	r24, 0xC6	; 198
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	97 8b       	std	Z+23, r25	; 0x17
    1460:	86 8b       	std	Z+22, r24	; 0x16
    1462:	11 8e       	std	Z+25, r1	; 0x19
    1464:	12 8e       	std	Z+26, r1	; 0x1a
    1466:	13 8e       	std	Z+27, r1	; 0x1b
    1468:	14 8e       	std	Z+28, r1	; 0x1c
    146a:	08 95       	ret

0000146c <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    146c:	08 95       	ret

0000146e <main>:

int main(void)
{
	init();
    146e:	0e 94 9f 0c 	call	0x193e	; 0x193e <init>

	initVariant();
    1472:	0e 94 36 0a 	call	0x146c	; 0x146c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1476:	0e 94 fe 03 	call	0x7fc	; 0x7fc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    147a:	ca ea       	ldi	r28, 0xAA	; 170
    147c:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    147e:	0e 94 17 03 	call	0x62e	; 0x62e <loop>
		if (serialEventRun) serialEventRun();
    1482:	20 97       	sbiw	r28, 0x00	; 0
    1484:	e1 f3       	breq	.-8      	; 0x147e <main+0x10>
    1486:	0e 94 aa 08 	call	0x1154	; 0x1154 <_Z14serialEventRunv>
    148a:	f9 cf       	rjmp	.-14     	; 0x147e <main+0x10>

0000148c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    148c:	cf 92       	push	r12
    148e:	df 92       	push	r13
    1490:	ef 92       	push	r14
    1492:	ff 92       	push	r15
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	6c 01       	movw	r12, r24
    149e:	7a 01       	movw	r14, r20
    14a0:	8b 01       	movw	r16, r22
    14a2:	c0 e0       	ldi	r28, 0x00	; 0
    14a4:	d0 e0       	ldi	r29, 0x00	; 0
    14a6:	ce 15       	cp	r28, r14
    14a8:	df 05       	cpc	r29, r15
    14aa:	89 f0       	breq	.+34     	; 0x14ce <_ZN5Print5writeEPKhj+0x42>
    14ac:	d8 01       	movw	r26, r16
    14ae:	6d 91       	ld	r22, X+
    14b0:	8d 01       	movw	r16, r26
    14b2:	d6 01       	movw	r26, r12
    14b4:	ed 91       	ld	r30, X+
    14b6:	fc 91       	ld	r31, X
    14b8:	01 90       	ld	r0, Z+
    14ba:	f0 81       	ld	r31, Z
    14bc:	e0 2d       	mov	r30, r0
    14be:	c6 01       	movw	r24, r12
    14c0:	09 95       	icall
    14c2:	89 2b       	or	r24, r25
    14c4:	11 f4       	brne	.+4      	; 0x14ca <_ZN5Print5writeEPKhj+0x3e>
    14c6:	7e 01       	movw	r14, r28
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <_ZN5Print5writeEPKhj+0x42>
    14ca:	21 96       	adiw	r28, 0x01	; 1
    14cc:	ec cf       	rjmp	.-40     	; 0x14a6 <_ZN5Print5writeEPKhj+0x1a>
    14ce:	c7 01       	movw	r24, r14
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	cf 90       	pop	r12
    14e0:	08 95       	ret

000014e2 <_ZN5Print5writeEPKc>:
    14e2:	61 15       	cp	r22, r1
    14e4:	71 05       	cpc	r23, r1
    14e6:	79 f0       	breq	.+30     	; 0x1506 <_ZN5Print5writeEPKc+0x24>
    14e8:	fb 01       	movw	r30, r22
    14ea:	01 90       	ld	r0, Z+
    14ec:	00 20       	and	r0, r0
    14ee:	e9 f7       	brne	.-6      	; 0x14ea <_ZN5Print5writeEPKc+0x8>
    14f0:	31 97       	sbiw	r30, 0x01	; 1
    14f2:	af 01       	movw	r20, r30
    14f4:	46 1b       	sub	r20, r22
    14f6:	57 0b       	sbc	r21, r23
    14f8:	dc 01       	movw	r26, r24
    14fa:	ed 91       	ld	r30, X+
    14fc:	fc 91       	ld	r31, X
    14fe:	02 80       	ldd	r0, Z+2	; 0x02
    1500:	f3 81       	ldd	r31, Z+3	; 0x03
    1502:	e0 2d       	mov	r30, r0
    1504:	09 94       	ijmp
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	08 95       	ret

0000150c <_ZN5Print5printEPKc>:
    150c:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_ZN5Print5writeEPKc>

00001510 <_ZN5Print5printEc>:
    1510:	dc 01       	movw	r26, r24
    1512:	ed 91       	ld	r30, X+
    1514:	fc 91       	ld	r31, X
    1516:	01 90       	ld	r0, Z+
    1518:	f0 81       	ld	r31, Z
    151a:	e0 2d       	mov	r30, r0
    151c:	09 94       	ijmp

0000151e <_ZN5Print7printlnEv>:
    151e:	6f e3       	ldi	r22, 0x3F	; 63
    1520:	71 e0       	ldi	r23, 0x01	; 1
    1522:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_ZN5Print5writeEPKc>

00001526 <_ZN5Print7printlnEPKc>:
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	ec 01       	movw	r28, r24
    1530:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN5Print5writeEPKc>
    1534:	8c 01       	movw	r16, r24
    1536:	ce 01       	movw	r24, r28
    1538:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN5Print7printlnEv>
    153c:	80 0f       	add	r24, r16
    153e:	91 1f       	adc	r25, r17
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <_ZN5Print11printNumberEmh>:
    154a:	8f 92       	push	r8
    154c:	9f 92       	push	r9
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	a1 97       	sbiw	r28, 0x21	; 33
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	7c 01       	movw	r14, r24
    1574:	d4 2e       	mov	r13, r20
    1576:	c5 2e       	mov	r12, r21
    1578:	db 01       	movw	r26, r22
    157a:	19 a2       	std	Y+33, r1	; 0x21
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	08 f4       	brcc	.+2      	; 0x1582 <_ZN5Print11printNumberEmh+0x38>
    1580:	2a e0       	ldi	r18, 0x0A	; 10
    1582:	8e 01       	movw	r16, r28
    1584:	0f 5d       	subi	r16, 0xDF	; 223
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	82 2e       	mov	r8, r18
    158a:	91 2c       	mov	r9, r1
    158c:	a1 2c       	mov	r10, r1
    158e:	b1 2c       	mov	r11, r1
    1590:	6d 2d       	mov	r22, r13
    1592:	7c 2d       	mov	r23, r12
    1594:	cd 01       	movw	r24, r26
    1596:	a5 01       	movw	r20, r10
    1598:	94 01       	movw	r18, r8
    159a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
    159e:	d2 2e       	mov	r13, r18
    15a0:	c3 2e       	mov	r12, r19
    15a2:	da 01       	movw	r26, r20
    15a4:	01 50       	subi	r16, 0x01	; 1
    15a6:	11 09       	sbc	r17, r1
    15a8:	6a 30       	cpi	r22, 0x0A	; 10
    15aa:	71 05       	cpc	r23, r1
    15ac:	81 05       	cpc	r24, r1
    15ae:	91 05       	cpc	r25, r1
    15b0:	10 f4       	brcc	.+4      	; 0x15b6 <_ZN5Print11printNumberEmh+0x6c>
    15b2:	60 5d       	subi	r22, 0xD0	; 208
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <_ZN5Print11printNumberEmh+0x6e>
    15b6:	69 5c       	subi	r22, 0xC9	; 201
    15b8:	f8 01       	movw	r30, r16
    15ba:	60 83       	st	Z, r22
    15bc:	23 2b       	or	r18, r19
    15be:	24 2b       	or	r18, r20
    15c0:	25 2b       	or	r18, r21
    15c2:	31 f7       	brne	.-52     	; 0x1590 <_ZN5Print11printNumberEmh+0x46>
    15c4:	b8 01       	movw	r22, r16
    15c6:	c7 01       	movw	r24, r14
    15c8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN5Print5writeEPKc>
    15cc:	a1 96       	adiw	r28, 0x21	; 33
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	bf 90       	pop	r11
    15ea:	af 90       	pop	r10
    15ec:	9f 90       	pop	r9
    15ee:	8f 90       	pop	r8
    15f0:	08 95       	ret

000015f2 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    15f2:	4f 92       	push	r4
    15f4:	5f 92       	push	r5
    15f6:	6f 92       	push	r6
    15f8:	7f 92       	push	r7
    15fa:	8f 92       	push	r8
    15fc:	9f 92       	push	r9
    15fe:	af 92       	push	r10
    1600:	bf 92       	push	r11
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ec 01       	movw	r28, r24
    1610:	6a 01       	movw	r12, r20
    1612:	7b 01       	movw	r14, r22
    1614:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1616:	9a 01       	movw	r18, r20
    1618:	ab 01       	movw	r20, r22
    161a:	c7 01       	movw	r24, r14
    161c:	b6 01       	movw	r22, r12
    161e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__unordsf2>
    1622:	88 23       	and	r24, r24
    1624:	19 f0       	breq	.+6      	; 0x162c <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1626:	62 e4       	ldi	r22, 0x42	; 66
    1628:	71 e0       	ldi	r23, 0x01	; 1
    162a:	27 c0       	rjmp	.+78     	; 0x167a <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    162c:	26 01       	movw	r4, r12
    162e:	37 01       	movw	r6, r14
    1630:	e8 94       	clt
    1632:	77 f8       	bld	r7, 7
    1634:	2f ef       	ldi	r18, 0xFF	; 255
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	5f e7       	ldi	r21, 0x7F	; 127
    163c:	c3 01       	movw	r24, r6
    163e:	b2 01       	movw	r22, r4
    1640:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__unordsf2>
    1644:	81 11       	cpse	r24, r1
    1646:	0d c0       	rjmp	.+26     	; 0x1662 <_ZN5Print10printFloatEdh+0x70>
    1648:	2f ef       	ldi	r18, 0xFF	; 255
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	5f e7       	ldi	r21, 0x7F	; 127
    1650:	c3 01       	movw	r24, r6
    1652:	b2 01       	movw	r22, r4
    1654:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__cmpsf2>
    1658:	18 16       	cp	r1, r24
    165a:	1c f4       	brge	.+6      	; 0x1662 <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    165c:	66 e4       	ldi	r22, 0x46	; 70
    165e:	71 e0       	ldi	r23, 0x01	; 1
    1660:	0c c0       	rjmp	.+24     	; 0x167a <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	4f e7       	ldi	r20, 0x7F	; 127
    1668:	5f e4       	ldi	r21, 0x4F	; 79
    166a:	c7 01       	movw	r24, r14
    166c:	b6 01       	movw	r22, r12
    166e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__gesf2>
    1672:	18 16       	cp	r1, r24
    1674:	9c f4       	brge	.+38     	; 0x169c <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1676:	6a e4       	ldi	r22, 0x4A	; 74
    1678:	71 e0       	ldi	r23, 0x01	; 1
    167a:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	7f 90       	pop	r7
    1692:	6f 90       	pop	r6
    1694:	5f 90       	pop	r5
    1696:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1698:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    169c:	2f ef       	ldi	r18, 0xFF	; 255
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f e7       	ldi	r20, 0x7F	; 127
    16a2:	5f ec       	ldi	r21, 0xCF	; 207
    16a4:	c7 01       	movw	r24, r14
    16a6:	b6 01       	movw	r22, r12
    16a8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__cmpsf2>
    16ac:	87 fd       	sbrc	r24, 7
    16ae:	e3 cf       	rjmp	.-58     	; 0x1676 <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	c7 01       	movw	r24, r14
    16b8:	b6 01       	movw	r22, r12
    16ba:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__cmpsf2>
    16be:	87 ff       	sbrs	r24, 7
    16c0:	0a c0       	rjmp	.+20     	; 0x16d6 <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    16c2:	6d e2       	ldi	r22, 0x2D	; 45
    16c4:	ce 01       	movw	r24, r28
    16c6:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN5Print5printEc>
    16ca:	4c 01       	movw	r8, r24
     number = -number;
    16cc:	f7 fa       	bst	r15, 7
    16ce:	f0 94       	com	r15
    16d0:	f7 f8       	bld	r15, 7
    16d2:	f0 94       	com	r15
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    16d6:	81 2c       	mov	r8, r1
    16d8:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    16da:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    16e4:	ab 14       	cp	r10, r11
    16e6:	41 f0       	breq	.+16     	; 0x16f8 <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    16f4:	a3 94       	inc	r10
    16f6:	f6 cf       	rjmp	.-20     	; 0x16e4 <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	c7 01       	movw	r24, r14
    16fe:	b6 01       	movw	r22, r12
    1700:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__addsf3>
    1704:	2b 01       	movw	r4, r22
    1706:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1708:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixunssfsi>
    170c:	6b 01       	movw	r12, r22
    170e:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    1710:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__floatunsisf>
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__subsf3>
    1720:	2b 01       	movw	r4, r22
    1722:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1724:	2a e0       	ldi	r18, 0x0A	; 10
    1726:	b7 01       	movw	r22, r14
    1728:	a6 01       	movw	r20, r12
    172a:	ce 01       	movw	r24, r28
    172c:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1730:	7c 01       	movw	r14, r24
    1732:	e8 0c       	add	r14, r8
    1734:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1736:	bb 20       	and	r11, r11
    1738:	31 f0       	breq	.+12     	; 0x1746 <_ZN5Print10printFloatEdh+0x154>
    n += print('.'); 
    173a:	6e e2       	ldi	r22, 0x2E	; 46
    173c:	ce 01       	movw	r24, r28
    173e:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN5Print5printEc>
    1742:	e8 0e       	add	r14, r24
    1744:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1746:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1748:	dd 20       	and	r13, r13
    174a:	29 f1       	breq	.+74     	; 0x1796 <_ZN5Print10printFloatEdh+0x1a4>
  {
    remainder *= 10.0;
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	c3 01       	movw	r24, r6
    1756:	b2 01       	movw	r22, r4
    1758:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
    175c:	2b 01       	movw	r4, r22
    175e:	3c 01       	movw	r6, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1760:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixunssfsi>
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1764:	4b 01       	movw	r8, r22
    1766:	a1 2c       	mov	r10, r1
    1768:	b1 2c       	mov	r11, r1
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    176a:	2a e0       	ldi	r18, 0x0A	; 10
    176c:	b5 01       	movw	r22, r10
    176e:	a4 01       	movw	r20, r8
    1770:	ce 01       	movw	r24, r28
    1772:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN5Print11printNumberEmh>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    1776:	e8 0e       	add	r14, r24
    1778:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    177a:	c5 01       	movw	r24, r10
    177c:	b4 01       	movw	r22, r8
    177e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__floatunsisf>
    1782:	9b 01       	movw	r18, r22
    1784:	ac 01       	movw	r20, r24
    1786:	c3 01       	movw	r24, r6
    1788:	b2 01       	movw	r22, r4
    178a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__subsf3>
    178e:	2b 01       	movw	r4, r22
    1790:	3c 01       	movw	r6, r24
    1792:	da 94       	dec	r13
    1794:	d9 cf       	rjmp	.-78     	; 0x1748 <_ZN5Print10printFloatEdh+0x156>
  } 
  
  return n;
}
    1796:	c7 01       	movw	r24, r14
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	bf 90       	pop	r11
    17a6:	af 90       	pop	r10
    17a8:	9f 90       	pop	r9
    17aa:	8f 90       	pop	r8
    17ac:	7f 90       	pop	r7
    17ae:	6f 90       	pop	r6
    17b0:	5f 90       	pop	r5
    17b2:	4f 90       	pop	r4
    17b4:	08 95       	ret

000017b6 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    17b6:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <_ZN5Print10printFloatEdh>

000017ba <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    17d0:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <timer0_millis>
    17d4:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <timer0_millis+0x1>
    17d8:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <timer0_millis+0x2>
    17dc:	b0 91 5b 02 	lds	r27, 0x025B	; 0x80025b <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    17e0:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    17e4:	23 e0       	ldi	r18, 0x03	; 3
    17e6:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    17e8:	2d 37       	cpi	r18, 0x7D	; 125
    17ea:	20 f4       	brcc	.+8      	; 0x17f4 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	a1 1d       	adc	r26, r1
    17f0:	b1 1d       	adc	r27, r1
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    17f4:	26 e8       	ldi	r18, 0x86	; 134
    17f6:	23 0f       	add	r18, r19
		m += 1;
    17f8:	02 96       	adiw	r24, 0x02	; 2
    17fa:	a1 1d       	adc	r26, r1
    17fc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    17fe:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <timer0_fract>
	timer0_millis = m;
    1802:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <timer0_millis>
    1806:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <timer0_millis+0x1>
    180a:	a0 93 5a 02 	sts	0x025A, r26	; 0x80025a <timer0_millis+0x2>
    180e:	b0 93 5b 02 	sts	0x025B, r27	; 0x80025b <timer0_millis+0x3>
	timer0_overflow_count++;
    1812:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <timer0_overflow_count>
    1816:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <timer0_overflow_count+0x1>
    181a:	a0 91 5e 02 	lds	r26, 0x025E	; 0x80025e <timer0_overflow_count+0x2>
    181e:	b0 91 5f 02 	lds	r27, 0x025F	; 0x80025f <timer0_overflow_count+0x3>
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	a1 1d       	adc	r26, r1
    1826:	b1 1d       	adc	r27, r1
    1828:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <timer0_overflow_count>
    182c:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <timer0_overflow_count+0x1>
    1830:	a0 93 5e 02 	sts	0x025E, r26	; 0x80025e <timer0_overflow_count+0x2>
    1834:	b0 93 5f 02 	sts	0x025F, r27	; 0x80025f <timer0_overflow_count+0x3>
}
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    184e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1850:	f8 94       	cli
	m = timer0_millis;
    1852:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <timer0_millis>
    1856:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <timer0_millis+0x1>
    185a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <timer0_millis+0x2>
    185e:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <timer0_millis+0x3>
	SREG = oldSREG;
    1862:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1864:	08 95       	ret

00001866 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1866:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1868:	f8 94       	cli
	m = timer0_overflow_count;
    186a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <timer0_overflow_count>
    186e:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <timer0_overflow_count+0x1>
    1872:	a0 91 5e 02 	lds	r26, 0x025E	; 0x80025e <timer0_overflow_count+0x2>
    1876:	b0 91 5f 02 	lds	r27, 0x025F	; 0x80025f <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    187a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    187c:	a8 9b       	sbis	0x15, 0	; 21
    187e:	05 c0       	rjmp	.+10     	; 0x188a <micros+0x24>
    1880:	2f 3f       	cpi	r18, 0xFF	; 255
    1882:	19 f0       	breq	.+6      	; 0x188a <micros+0x24>
		m++;
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	a1 1d       	adc	r26, r1
    1888:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    188a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    188c:	ba 2f       	mov	r27, r26
    188e:	a9 2f       	mov	r26, r25
    1890:	98 2f       	mov	r25, r24
    1892:	88 27       	eor	r24, r24
    1894:	82 0f       	add	r24, r18
    1896:	91 1d       	adc	r25, r1
    1898:	a1 1d       	adc	r26, r1
    189a:	b1 1d       	adc	r27, r1
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	42 e0       	ldi	r20, 0x02	; 2
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	4a 95       	dec	r20
    18ac:	d1 f7       	brne	.-12     	; 0x18a2 <micros+0x3c>
}
    18ae:	08 95       	ret

000018b0 <delay>:

void delay(unsigned long ms)
{
    18b0:	8f 92       	push	r8
    18b2:	9f 92       	push	r9
    18b4:	af 92       	push	r10
    18b6:	bf 92       	push	r11
    18b8:	cf 92       	push	r12
    18ba:	df 92       	push	r13
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	6b 01       	movw	r12, r22
    18c2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    18c4:	0e 94 33 0c 	call	0x1866	; 0x1866 <micros>
    18c8:	4b 01       	movw	r8, r22
    18ca:	5c 01       	movw	r10, r24

	while (ms > 0) {
    18cc:	c1 14       	cp	r12, r1
    18ce:	d1 04       	cpc	r13, r1
    18d0:	e1 04       	cpc	r14, r1
    18d2:	f1 04       	cpc	r15, r1
    18d4:	01 f1       	breq	.+64     	; 0x1916 <delay+0x66>
		yield();
    18d6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    18da:	0e 94 33 0c 	call	0x1866	; 0x1866 <micros>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	88 19       	sub	r24, r8
    18e4:	99 09       	sbc	r25, r9
    18e6:	aa 09       	sbc	r26, r10
    18e8:	bb 09       	sbc	r27, r11
    18ea:	88 3e       	cpi	r24, 0xE8	; 232
    18ec:	93 40       	sbci	r25, 0x03	; 3
    18ee:	a1 05       	cpc	r26, r1
    18f0:	b1 05       	cpc	r27, r1
    18f2:	60 f3       	brcs	.-40     	; 0x18cc <delay+0x1c>
			ms--;
    18f4:	21 e0       	ldi	r18, 0x01	; 1
    18f6:	c2 1a       	sub	r12, r18
    18f8:	d1 08       	sbc	r13, r1
    18fa:	e1 08       	sbc	r14, r1
    18fc:	f1 08       	sbc	r15, r1
			start += 1000;
    18fe:	88 ee       	ldi	r24, 0xE8	; 232
    1900:	88 0e       	add	r8, r24
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	98 1e       	adc	r9, r24
    1906:	a1 1c       	adc	r10, r1
    1908:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    190a:	c1 14       	cp	r12, r1
    190c:	d1 04       	cpc	r13, r1
    190e:	e1 04       	cpc	r14, r1
    1910:	f1 04       	cpc	r15, r1
    1912:	19 f7       	brne	.-58     	; 0x18da <delay+0x2a>
    1914:	db cf       	rjmp	.-74     	; 0x18cc <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	bf 90       	pop	r11
    1920:	af 90       	pop	r10
    1922:	9f 90       	pop	r9
    1924:	8f 90       	pop	r8
    1926:	08 95       	ret

00001928 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1928:	82 30       	cpi	r24, 0x02	; 2
    192a:	91 05       	cpc	r25, r1
    192c:	38 f0       	brcs	.+14     	; 0x193c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1936:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <delayMicroseconds+0x10>
    193c:	08 95       	ret

0000193e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    193e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1940:	84 b5       	in	r24, 0x24	; 36
    1942:	82 60       	ori	r24, 0x02	; 2
    1944:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1946:	84 b5       	in	r24, 0x24	; 36
    1948:	81 60       	ori	r24, 0x01	; 1
    194a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    194c:	85 b5       	in	r24, 0x25	; 37
    194e:	82 60       	ori	r24, 0x02	; 2
    1950:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1952:	85 b5       	in	r24, 0x25	; 37
    1954:	81 60       	ori	r24, 0x01	; 1
    1956:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1958:	ee e6       	ldi	r30, 0x6E	; 110
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	81 60       	ori	r24, 0x01	; 1
    1960:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1962:	e1 e8       	ldi	r30, 0x81	; 129
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1968:	80 81       	ld	r24, Z
    196a:	82 60       	ori	r24, 0x02	; 2
    196c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    196e:	80 81       	ld	r24, Z
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1974:	e0 e8       	ldi	r30, 0x80	; 128
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	81 60       	ori	r24, 0x01	; 1
    197c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    197e:	e1 eb       	ldi	r30, 0xB1	; 177
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	84 60       	ori	r24, 0x04	; 4
    1986:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1988:	e0 eb       	ldi	r30, 0xB0	; 176
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	81 60       	ori	r24, 0x01	; 1
    1990:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1992:	ea e7       	ldi	r30, 0x7A	; 122
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	84 60       	ori	r24, 0x04	; 4
    199a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    199c:	80 81       	ld	r24, Z
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    19a2:	80 81       	ld	r24, Z
    19a4:	81 60       	ori	r24, 0x01	; 1
    19a6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    19a8:	80 81       	ld	r24, Z
    19aa:	80 68       	ori	r24, 0x80	; 128
    19ac:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    19ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    19b2:	08 95       	ret

000019b4 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    19b4:	8e 30       	cpi	r24, 0x0E	; 14
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <analogRead+0x6>
    19b8:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    19ba:	87 70       	andi	r24, 0x07	; 7
    19bc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <analog_reference>
    19c0:	90 e4       	ldi	r25, 0x40	; 64
    19c2:	29 9f       	mul	r18, r25
    19c4:	90 01       	movw	r18, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	82 2b       	or	r24, r18
    19ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    19ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19d2:	80 64       	ori	r24, 0x40	; 64
    19d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    19d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19dc:	86 fd       	sbrc	r24, 6
    19de:	fc cf       	rjmp	.-8      	; 0x19d8 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    19e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    19e4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    19e8:	90 e0       	ldi	r25, 0x00	; 0
}
    19ea:	92 2b       	or	r25, r18
    19ec:	08 95       	ret

000019ee <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    19ee:	83 30       	cpi	r24, 0x03	; 3
    19f0:	81 f0       	breq	.+32     	; 0x1a12 <turnOffPWM+0x24>
    19f2:	28 f4       	brcc	.+10     	; 0x19fe <turnOffPWM+0x10>
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	99 f0       	breq	.+38     	; 0x1a1e <turnOffPWM+0x30>
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	a1 f0       	breq	.+40     	; 0x1a24 <turnOffPWM+0x36>
    19fc:	08 95       	ret
    19fe:	87 30       	cpi	r24, 0x07	; 7
    1a00:	a9 f0       	breq	.+42     	; 0x1a2c <turnOffPWM+0x3e>
    1a02:	88 30       	cpi	r24, 0x08	; 8
    1a04:	b9 f0       	breq	.+46     	; 0x1a34 <turnOffPWM+0x46>
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	d1 f4       	brne	.+52     	; 0x1a3e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1a0a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a0e:	8f 7d       	andi	r24, 0xDF	; 223
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1a12:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a16:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1a18:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a1c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1a1e:	84 b5       	in	r24, 0x24	; 36
    1a20:	8f 77       	andi	r24, 0x7F	; 127
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1a24:	84 b5       	in	r24, 0x24	; 36
    1a26:	8f 7d       	andi	r24, 0xDF	; 223
    1a28:	84 bd       	out	0x24, r24	; 36
    1a2a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1a2c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a30:	8f 77       	andi	r24, 0x7F	; 127
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1a34:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a38:	8f 7d       	andi	r24, 0xDF	; 223
    1a3a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a3e:	08 95       	ret

00001a40 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	fc 01       	movw	r30, r24
    1a48:	e4 58       	subi	r30, 0x84	; 132
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e0 57       	subi	r30, 0x70	; 112
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1a56:	88 23       	and	r24, r24
    1a58:	61 f1       	breq	.+88     	; 0x1ab2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	fc 01       	movw	r30, r24
    1a62:	e8 54       	subi	r30, 0x48	; 72
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	c5 91       	lpm	r28, Z+
    1a68:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	e2 55       	subi	r30, 0x52	; 82
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	a5 91       	lpm	r26, Z+
    1a72:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1a74:	61 11       	cpse	r22, r1
    1a76:	09 c0       	rjmp	.+18     	; 0x1a8a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1a78:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a7a:	f8 94       	cli
		*reg &= ~bit;
    1a7c:	88 81       	ld	r24, Y
    1a7e:	20 95       	com	r18
    1a80:	82 23       	and	r24, r18
    1a82:	88 83       	st	Y, r24
		*out &= ~bit;
    1a84:	ec 91       	ld	r30, X
    1a86:	2e 23       	and	r18, r30
    1a88:	0b c0       	rjmp	.+22     	; 0x1aa0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1a8a:	62 30       	cpi	r22, 0x02	; 2
    1a8c:	61 f4       	brne	.+24     	; 0x1aa6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1a8e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a90:	f8 94       	cli
		*reg &= ~bit;
    1a92:	38 81       	ld	r19, Y
    1a94:	82 2f       	mov	r24, r18
    1a96:	80 95       	com	r24
    1a98:	83 23       	and	r24, r19
    1a9a:	88 83       	st	Y, r24
		*out |= bit;
    1a9c:	ec 91       	ld	r30, X
    1a9e:	2e 2b       	or	r18, r30
    1aa0:	2c 93       	st	X, r18
		SREG = oldSREG;
    1aa2:	9f bf       	out	0x3f, r25	; 63
    1aa4:	06 c0       	rjmp	.+12     	; 0x1ab2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1aa6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1aa8:	f8 94       	cli
		*reg |= bit;
    1aaa:	e8 81       	ld	r30, Y
    1aac:	2e 2b       	or	r18, r30
    1aae:	28 83       	st	Y, r18
		SREG = oldSREG;
    1ab0:	8f bf       	out	0x3f, r24	; 63
	}
}
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	f9 01       	movw	r30, r18
    1ac4:	e8 59       	subi	r30, 0x98	; 152
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1aca:	f9 01       	movw	r30, r18
    1acc:	e4 58       	subi	r30, 0x84	; 132
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1ad2:	f9 01       	movw	r30, r18
    1ad4:	e0 57       	subi	r30, 0x70	; 112
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1ada:	cc 23       	and	r28, r28
    1adc:	c9 f0       	breq	.+50     	; 0x1b10 <digitalWrite+0x58>
    1ade:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <turnOffPWM>

	out = portOutputRegister(port);
    1ae6:	ec 2f       	mov	r30, r28
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	ee 0f       	add	r30, r30
    1aec:	ff 1f       	adc	r31, r31
    1aee:	e2 55       	subi	r30, 0x52	; 82
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	a5 91       	lpm	r26, Z+
    1af4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1af6:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1af8:	f8 94       	cli

	if (val == LOW) {
    1afa:	11 11       	cpse	r17, r1
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <digitalWrite+0x50>
		*out &= ~bit;
    1afe:	9c 91       	ld	r25, X
    1b00:	ed 2f       	mov	r30, r29
    1b02:	e0 95       	com	r30
    1b04:	e9 23       	and	r30, r25
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <digitalWrite+0x54>
	} else {
		*out |= bit;
    1b08:	ec 91       	ld	r30, X
    1b0a:	ed 2b       	or	r30, r29
    1b0c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1b0e:	8f bf       	out	0x3f, r24	; 63
}
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	08 95       	ret

00001b18 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	f9 01       	movw	r30, r18
    1b22:	e8 59       	subi	r30, 0x98	; 152
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1b28:	f9 01       	movw	r30, r18
    1b2a:	e4 58       	subi	r30, 0x84	; 132
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1b30:	f9 01       	movw	r30, r18
    1b32:	e0 57       	subi	r30, 0x70	; 112
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1b38:	cc 23       	and	r28, r28
    1b3a:	91 f0       	breq	.+36     	; 0x1b60 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1b3c:	81 11       	cpse	r24, r1
    1b3e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1b42:	ec 2f       	mov	r30, r28
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	ee 0f       	add	r30, r30
    1b48:	ff 1f       	adc	r31, r31
    1b4a:	ec 55       	subi	r30, 0x5C	; 92
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	a5 91       	lpm	r26, Z+
    1b50:	b4 91       	lpm	r27, Z
    1b52:	ec 91       	ld	r30, X
    1b54:	ed 23       	and	r30, r29
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	21 f4       	brne	.+8      	; 0x1b64 <digitalRead+0x4c>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1b6a:	08 95       	ret

00001b6c <__cmpsf2>:
    1b6c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_cmp>
    1b70:	08 f4       	brcc	.+2      	; 0x1b74 <__cmpsf2+0x8>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	08 95       	ret

00001b76 <__fixunssfsi>:
    1b76:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_splitA>
    1b7a:	88 f0       	brcs	.+34     	; 0x1b9e <__fixunssfsi+0x28>
    1b7c:	9f 57       	subi	r25, 0x7F	; 127
    1b7e:	98 f0       	brcs	.+38     	; 0x1ba6 <__fixunssfsi+0x30>
    1b80:	b9 2f       	mov	r27, r25
    1b82:	99 27       	eor	r25, r25
    1b84:	b7 51       	subi	r27, 0x17	; 23
    1b86:	b0 f0       	brcs	.+44     	; 0x1bb4 <__fixunssfsi+0x3e>
    1b88:	e1 f0       	breq	.+56     	; 0x1bc2 <__fixunssfsi+0x4c>
    1b8a:	66 0f       	add	r22, r22
    1b8c:	77 1f       	adc	r23, r23
    1b8e:	88 1f       	adc	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	1a f0       	brmi	.+6      	; 0x1b9a <__fixunssfsi+0x24>
    1b94:	ba 95       	dec	r27
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__fixunssfsi+0x14>
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <__fixunssfsi+0x4c>
    1b9a:	b1 30       	cpi	r27, 0x01	; 1
    1b9c:	91 f0       	breq	.+36     	; 0x1bc2 <__fixunssfsi+0x4c>
    1b9e:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_zero>
    1ba2:	b1 e0       	ldi	r27, 0x01	; 1
    1ba4:	08 95       	ret
    1ba6:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__fp_zero>
    1baa:	67 2f       	mov	r22, r23
    1bac:	78 2f       	mov	r23, r24
    1bae:	88 27       	eor	r24, r24
    1bb0:	b8 5f       	subi	r27, 0xF8	; 248
    1bb2:	39 f0       	breq	.+14     	; 0x1bc2 <__fixunssfsi+0x4c>
    1bb4:	b9 3f       	cpi	r27, 0xF9	; 249
    1bb6:	cc f3       	brlt	.-14     	; 0x1baa <__fixunssfsi+0x34>
    1bb8:	86 95       	lsr	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	b3 95       	inc	r27
    1bc0:	d9 f7       	brne	.-10     	; 0x1bb8 <__fixunssfsi+0x42>
    1bc2:	3e f4       	brtc	.+14     	; 0x1bd2 <__fixunssfsi+0x5c>
    1bc4:	90 95       	com	r25
    1bc6:	80 95       	com	r24
    1bc8:	70 95       	com	r23
    1bca:	61 95       	neg	r22
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	08 95       	ret

00001bd4 <__unordsf2>:
    1bd4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_cmp>
    1bd8:	88 0b       	sbc	r24, r24
    1bda:	99 0b       	sbc	r25, r25
    1bdc:	08 95       	ret

00001bde <__udivmodhi4>:
    1bde:	aa 1b       	sub	r26, r26
    1be0:	bb 1b       	sub	r27, r27
    1be2:	51 e1       	ldi	r21, 0x11	; 17
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <__udivmodhi4_ep>

00001be6 <__udivmodhi4_loop>:
    1be6:	aa 1f       	adc	r26, r26
    1be8:	bb 1f       	adc	r27, r27
    1bea:	a6 17       	cp	r26, r22
    1bec:	b7 07       	cpc	r27, r23
    1bee:	10 f0       	brcs	.+4      	; 0x1bf4 <__udivmodhi4_ep>
    1bf0:	a6 1b       	sub	r26, r22
    1bf2:	b7 0b       	sbc	r27, r23

00001bf4 <__udivmodhi4_ep>:
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	5a 95       	dec	r21
    1bfa:	a9 f7       	brne	.-22     	; 0x1be6 <__udivmodhi4_loop>
    1bfc:	80 95       	com	r24
    1bfe:	90 95       	com	r25
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	08 95       	ret

00001c06 <__udivmodsi4>:
    1c06:	a1 e2       	ldi	r26, 0x21	; 33
    1c08:	1a 2e       	mov	r1, r26
    1c0a:	aa 1b       	sub	r26, r26
    1c0c:	bb 1b       	sub	r27, r27
    1c0e:	fd 01       	movw	r30, r26
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <__udivmodsi4_ep>

00001c12 <__udivmodsi4_loop>:
    1c12:	aa 1f       	adc	r26, r26
    1c14:	bb 1f       	adc	r27, r27
    1c16:	ee 1f       	adc	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	a2 17       	cp	r26, r18
    1c1c:	b3 07       	cpc	r27, r19
    1c1e:	e4 07       	cpc	r30, r20
    1c20:	f5 07       	cpc	r31, r21
    1c22:	20 f0       	brcs	.+8      	; 0x1c2c <__udivmodsi4_ep>
    1c24:	a2 1b       	sub	r26, r18
    1c26:	b3 0b       	sbc	r27, r19
    1c28:	e4 0b       	sbc	r30, r20
    1c2a:	f5 0b       	sbc	r31, r21

00001c2c <__udivmodsi4_ep>:
    1c2c:	66 1f       	adc	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	88 1f       	adc	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	1a 94       	dec	r1
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <__udivmodsi4_loop>
    1c38:	60 95       	com	r22
    1c3a:	70 95       	com	r23
    1c3c:	80 95       	com	r24
    1c3e:	90 95       	com	r25
    1c40:	9b 01       	movw	r18, r22
    1c42:	ac 01       	movw	r20, r24
    1c44:	bd 01       	movw	r22, r26
    1c46:	cf 01       	movw	r24, r30
    1c48:	08 95       	ret

00001c4a <__tablejump2__>:
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	05 90       	lpm	r0, Z+
    1c50:	f4 91       	lpm	r31, Z
    1c52:	e0 2d       	mov	r30, r0
    1c54:	09 94       	ijmp

00001c56 <_exit>:
    1c56:	f8 94       	cli

00001c58 <__stop_program>:
    1c58:	ff cf       	rjmp	.-2      	; 0x1c58 <__stop_program>
